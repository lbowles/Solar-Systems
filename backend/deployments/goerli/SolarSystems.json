{
  "address": "0x07e12F3F0bFCeEE2B92B68eD485E85B896761C75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_renderer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ApprovalCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApprovalQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceQueryForZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintERC2309QuantityExceedsLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintZeroQuantity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerQueryForNonexistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipNotInitializedForExtraData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferCallerNotOwnerNorApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFromIncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "URIQueryForNonexistentToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ConsecutiveTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_recipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renderer",
      "outputs": [
        {
          "internalType": "contract Renderer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xed03d03b251c96e0a4891ded1dc9ebbeb57f5abc4934d81c5b31fa02c3b5c2f0",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0x07e12F3F0bFCeEE2B92B68eD485E85B896761C75",
    "transactionIndex": 12,
    "gasUsed": "2967813",
    "logsBloom": "0x
    "blockHash": "0x81b50b7c73db346f0cade3bc8af121d85008da49c085319746fe859751661bd0",
    "transactionHash": "0xed03d03b251c96e0a4891ded1dc9ebbeb57f5abc4934d81c5b31fa02c3b5c2f0",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 8220876,
        "transactionHash": "0xed03d03b251c96e0a4891ded1dc9ebbeb57f5abc4934d81c5b31fa02c3b5c2f0",
        "address": "0x07e12F3F0bFCeEE2B92B68eD485E85B896761C75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc78016816633528dd4918746d7f016563ce27fa"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x81b50b7c73db346f0cade3bc8af121d85008da49c085319746fe859751661bd0"
      }
    ],
    "blockNumber": 8220876,
    "cumulativeGasUsed": "7391525",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test",
    "TEST",
    "10000000000000000",
    1000,
    "0xF5aEdB99d72d84a70BE7a875Ad8232406FDBB91D"
  ],
  "numDeployments": 8,
  "solcInputHash": "0837987798b33f4960f91e6eb6abe5f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_renderer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintERC2309QuantityExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipNotInitializedForExtraData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"ConsecutiveTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renderer\",\"outputs\":[{\"internalType\":\"contract Renderer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"airdrop(address[],uint256)\":{\"params\":{\"_quantity\":\"Quantity of solar systems to airdrop to each recipient.\",\"_recipients\":\"List of recipients to receive the airdrop.\"}},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in `owner`'s account.\"},\"constructor\":{\"details\":\"Constructs a new instance of the contract.\",\"params\":{\"_maxSupply\":\"Maximum supply of solar systems.\",\"_name\":\"Name of the ERC721 token.\",\"_price\":\"Price of each solar system in wei.\",\"_symbol\":\"Symbol of the ERC721 token.\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}.\"},\"mint(uint256)\":{\"params\":{\"_quantity\":\"Quantity of solar systems to mint.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"ID of the token to get the URI for.\"},\"returns\":{\"_0\":\"Token URI.\"}},\"totalSupply()\":{\"details\":\"Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"ApprovalCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"ApprovalQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"BalanceQueryForZeroAddress()\":[{\"notice\":\"Cannot query the balance for the zero address.\"}],\"MintERC2309QuantityExceedsLimit()\":[{\"notice\":\"The `quantity` minted with ERC2309 exceeds the safety limit.\"}],\"MintToZeroAddress()\":[{\"notice\":\"Cannot mint to the zero address.\"}],\"MintZeroQuantity()\":[{\"notice\":\"The quantity of tokens minted must be more than zero.\"}],\"OwnerQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}],\"OwnershipNotInitializedForExtraData()\":[{\"notice\":\"The `extraData` cannot be set on an unintialized ownership slot.\"}],\"TransferCallerNotOwnerNorApproved()\":[{\"notice\":\"The caller must own the token or be an approved operator.\"}],\"TransferFromIncorrectOwner()\":[{\"notice\":\"The token must be owned by `from`.\"}],\"TransferToNonERC721ReceiverImplementer()\":[{\"notice\":\"Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\"}],\"TransferToZeroAddress()\":[{\"notice\":\"Cannot transfer to the zero address.\"}],\"URIQueryForNonexistentToken()\":[{\"notice\":\"The token does not exist.\"}]},\"kind\":\"user\",\"methods\":{\"airdrop(address[],uint256)\":{\"notice\":\"Airdrops solar systems to a list of recipients. Only callable by the contract owner.\"},\"mint(uint256)\":{\"notice\":\"Mints new solar systems for the caller.\"},\"tokenURI(uint256)\":{\"notice\":\"Returns the token URI for a given token ID.\"},\"withdraw()\":{\"notice\":\"Withdraws the contract's balance. Only callable by the contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolarSystem.sol\":\"SolarSystems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Renderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Trigonometry.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\ncontract Renderer {\\n  uint256 constant SIZE = 500;\\n\\n  struct Planet {\\n    uint256 planetRadius;\\n    uint256 ringsOffset;\\n    uint256 orbitRadius;\\n    uint256[3] color;\\n    uint256 initialAngleDegrees;\\n    uint256 duration;\\n  }\\n\\n  function translateWithAngle(\\n    int256 x,\\n    int256 y,\\n    uint256 degrees\\n  ) internal pure returns (int256, int256) {\\n    int256 newX = x;\\n    int256 newY = y;\\n\\n    newX =\\n      x *\\n      Trigonometry.cos(degrees * (Trigonometry.PI / 180)) -\\n      y *\\n      Trigonometry.sin(degrees * (Trigonometry.PI / 180));\\n    newY =\\n      x *\\n      Trigonometry.sin(degrees * (Trigonometry.PI / 180)) +\\n      y *\\n      Trigonometry.cos(degrees * (Trigonometry.PI / 180));\\n\\n    return (newX, newY);\\n  }\\n\\n\\n  /**\\n  * @notice Gets the SVG representation of a planet's orbit.\\n  * @param planet The planet to generate the SVG for.\\n  */\\n  function getOrbitSVG(Planet memory planet) public pure returns (string memory) {\\n    uint256 halfCanvasWidth = SIZE / 2;\\n\\n    // Calculate the initial position of the planet\\n    int256 x = int256(planet.orbitRadius);\\n    int256 y = 0;\\n\\n    (int256 innerX, int256 innerY) = translateWithAngle(x - 1, y, planet.initialAngleDegrees);\\n    (int256 outerX, int256 outerY) = translateWithAngle(x, y, planet.initialAngleDegrees);\\n\\n    string memory colorTuple = string.concat(\\n      utils.uint2str(planet.color[0]),\\n      \\\",\\\",\\n      utils.uint2str(planet.color[1]),\\n      \\\",\\\",\\n      utils.uint2str(planet.color[2])\\n    );\\n\\n    // Generate the SVG string\\n    string memory renderedSVG = string.concat(\\n      '<circle cx=\\\"',\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" cy=\\\"',\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" r=\\\"',\\n       utils.uint2str(planet.orbitRadius),\\n      '\\\" fill=\\\"none\\\" stroke=\\\"rgba(',\\n      colorTuple,\\n      ',0.5)\\\"/>',\\n      // Inner circle\\n      '<g><circle cx=\\\"',\\n      utils.uint2str(uint256(int256(halfCanvasWidth) + innerX / 1e18)),\\n      '\\\" cy=\\\"'\\n      \\n    );\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      utils.uint2str(uint256(int256(halfCanvasWidth) - innerY / 1e18)),\\n      '\\\" r=\\\"',\\n      utils.uint2str(planet.planetRadius - 2),\\n      '\\\" fill=\\\"rgb(',\\n      colorTuple,\\n      ')\\\"/>'\\n      // Outer circle\\n      '<circle cx=\\\"',\\n      utils.uint2str(uint256(int256(halfCanvasWidth) + outerX / 1e18)),\\n      '\\\" cy=\\\"'\\n    );\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      utils.uint2str(uint256(int256(halfCanvasWidth) - outerY / 1e18)),\\n      '\\\" r=\\\"',\\n      utils.uint2str(planet.planetRadius),\\n      '\\\" fill-opacity=\\\"0.8\\\" fill=\\\"rgb(',\\n      colorTuple,\\n      ')\\\"/>'\\n    );\\n\\n    if (planet.ringsOffset != 0) {\\n      uint256 ringsRadius = planet.planetRadius + planet.ringsOffset;\\n      renderedSVG = string.concat(\\n        renderedSVG,\\n        // Rings\\n        '<circle cx=\\\"',\\n        utils.uint2str(uint256(int256(halfCanvasWidth) + outerX / 1e18)),\\n        '\\\" cy=\\\"',\\n        utils.uint2str(uint256(int256(halfCanvasWidth) - outerY / 1e18)),\\n        '\\\" r=\\\"',\\n        utils.uint2str(ringsRadius),\\n        '\\\" fill=\\\"none\\\" stroke-width=\\\"1\\\" stroke=\\\"rgb(',\\n        colorTuple,\\n        ')\\\"/>'\\n      );\\n    }\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      '<animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 ',\\n      utils.uint2str(halfCanvasWidth),\\n      \\\" \\\",\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" to=\\\"360 ',\\n      utils.uint2str(halfCanvasWidth),\\n      \\\" \\\",\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" dur=\\\"'\\n    );\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      utils.uint2str(planet.duration),\\n      's\\\" repeatCount=\\\"indefinite\\\"></animateTransform>',\\n      \\\"</g>\\\"\\n    );\\n\\n    return renderedSVG;\\n  }\\n\\n  /**\\n  * @notice Gets the number of planets in a solar system.\\n  * @param _tokenId The token ID of the solar system to get the number of planets for.\\n  */\\n  function numPlanetsForTokenId(uint256 _tokenId) public pure returns (uint256) {\\n    return utils.randomRange(_tokenId, \\\"numPlanets\\\", 1, 6);\\n  }\\n\\n  /**\\n  * @notice Gets the number of ringed planets in a solar system.\\n  * @param _tokenId The token ID of the solar system to get the number of ringed planets for.\\n  */\\n  function numRingedPlanetsForTokenId(uint256 _tokenId) public pure returns (uint256) {\\n    uint256 numRingedPlanets;\\n    for (uint256 i = 0; i < numPlanetsForTokenId(_tokenId); i++) {\\n      if (utils.randomRange(_tokenId, string.concat(\\\"ringsOffset\\\", utils.uint2str(i)), 0, 10) == 5) {\\n        numRingedPlanets++;\\n      }\\n    }\\n    return numRingedPlanets;\\n  }\\n\\n  /**\\n  * @notice Determines if a solar system has a rare star.\\n  * @param _tokenId The token ID of the solar system to check.\\n  */\\n  function hasRareStarForTokenId(uint256 _tokenId) public pure returns (bool) {\\n    return utils.randomRange(_tokenId, \\\"rareStar\\\", 0, 10) == 5;\\n  }\\n\\n  /**\\n  * @notice Gets the SVG representation of a solar system.\\n  * @param _tokenId The token ID of the solar system to generate the SVG for.\\n  */\\n  function getSVG(uint256 _tokenId) public pure returns (string memory) {\\n    uint256 numPlanets = numPlanetsForTokenId(_tokenId);\\n    uint256 radiusInterval = SIZE / 2 / (numPlanets + 3);\\n    uint256 planetRadiusUpperBound = utils.min(radiusInterval / 2, SIZE / 4);\\n    uint256 planetRadiusLowerBound = radiusInterval / 4;\\n\\n    uint256 starRadius = utils.randomRange(_tokenId, \\\"starRadius\\\", radiusInterval, radiusInterval * 2 - 10);\\n    string memory starAttributes = hasRareStarForTokenId(_tokenId) ? 'fill=\\\"#39B1FF\\\"' : 'fill=\\\"#FFDA17\\\"';\\n\\n    string memory renderSvg = string.concat(\\n      '<svg width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(SIZE),\\n      \\\" \\\",\\n      utils.uint2str(SIZE),\\n      '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n      '<rect width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" fill=\\\"#0D1F2F\\\"></rect>',\\n      '<circle cx=\\\"',\\n      utils.uint2str(SIZE / 2),\\n      '\\\" cy=\\\"',\\n      utils.uint2str(SIZE / 2),\\n      '\\\" r=\\\"',\\n      utils.uint2str(starRadius),\\n      '\\\" ',\\n      starAttributes,\\n      \\\"/>\\\"\\n    );\\n\\n    for (uint256 i = 0; i < numPlanets; i++) {\\n      Planet memory planet;\\n\\n      if (utils.randomRange(_tokenId, string.concat(\\\"ringsOffset\\\", utils.uint2str(i)), 0, 10) == 5) {\\n        planet.ringsOffset = 4;\\n      }\\n\\n      planet.planetRadius = utils.randomRange(\\n        _tokenId,\\n        string.concat(\\\"planetRadius\\\", utils.uint2str(i)),\\n        planetRadiusLowerBound,\\n        planetRadiusUpperBound - planet.ringsOffset\\n      );\\n\\n      planet.orbitRadius = radiusInterval * (i + 3);\\n      planet.duration = utils.randomRange(_tokenId, string.concat(\\\"duration\\\", utils.uint2str(i)), 5, 15);\\n\\n      planet.color[0] = utils.randomRange(_tokenId, string.concat(\\\"colorR\\\", utils.uint2str(i)), 100, 255);\\n      planet.color[1] = utils.randomRange(_tokenId, string.concat(\\\"colorG\\\", utils.uint2str(i)), 100, 255);\\n      planet.color[2] = utils.randomRange(_tokenId, string.concat(\\\"colorB\\\", utils.uint2str(i)), 100, 255);\\n\\n      planet.initialAngleDegrees = utils.randomRange(\\n        _tokenId,\\n        string.concat(\\\"initialAngle\\\", utils.uint2str(i)),\\n        0,\\n        360\\n      );\\n\\n      string memory planetSVG = getOrbitSVG(planet);\\n      renderSvg = string.concat(renderSvg, planetSVG);\\n    }\\n\\n    renderSvg = string.concat(renderSvg, \\\"</svg>\\\");\\n\\n    return renderSvg;\\n  }\\n\\n  function render(uint256 _tokenId) public pure returns (string memory) {\\n    return getSVG(_tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x61e66f212810a1564d8720b2b62455de1f50771b6333dddd706b1b1f951bf047\",\"license\":\"MIT\"},\"contracts/SolarSystem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\nimport \\\"./Renderer.sol\\\";\\nimport \\\"svgnft/contracts/Base64.sol\\\";\\n\\ncontract SolarSystems is ERC721A, Ownable {\\n  uint256 public price;\\n  uint256 public maxSupply;\\n  Renderer public renderer;\\n\\n  /**\\n   * @dev Constructs a new instance of the contract.\\n   * @param _name Name of the ERC721 token.\\n   * @param _symbol Symbol of the ERC721 token.\\n   * @param _price Price of each solar system in wei.\\n   * @param _maxSupply Maximum supply of solar systems.\\n   */\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint256 _price,\\n    uint256 _maxSupply,\\n    address _renderer\\n  ) ERC721A(_name, _symbol) {\\n    price = _price;\\n    maxSupply = _maxSupply;\\n    renderer = Renderer(_renderer);\\n  }\\n\\n  /**\\n   * @notice Returns the token URI for a given token ID.\\n   * @param tokenId ID of the token to get the URI for.\\n   * @return Token URI.\\n   */\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n    string memory name = string(abi.encodePacked(\\\"Solar System #\\\", utils.uint2str(tokenId)));\\n    string memory description = \\\"Fully on-chain, procedurally generated, animated solar systems.\\\";\\n    string memory svg = renderer.getSVG(tokenId);\\n\\n    string memory json = string(\\n      abi.encodePacked(\\n        '{\\\"name\\\":\\\"',\\n        name,\\n        '\\\",\\\"description\\\":\\\"',\\n        description,\\n        '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Planets\\\",\\\"value\\\":\\\"',\\n        utils.uint2str(renderer.numPlanetsForTokenId(tokenId)),\\n        '\\\"}, {\\\"trait_type\\\":\\\"Ringed Planets\\\", \\\"value\\\": \\\"',\\n        utils.uint2str(renderer.numRingedPlanetsForTokenId(tokenId)),\\n        '\\\"}, {\\\"trait_type\\\":\\\"Star Type\\\", \\\"value\\\": \\\"',\\n        renderer.hasRareStarForTokenId(tokenId) ? \\\"Blue\\\" : \\\"Normal\\\",\\n        '\\\"}], \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n        Base64.encode(bytes(svg)),\\n        '\\\"}'\\n      )\\n    );\\n    return string(abi.encodePacked(\\\"data:application/json;base64,\\\", Base64.encode(bytes(json))));\\n  }\\n\\n  /**\\n   * @notice Mints new solar systems for the caller.\\n   * @param _quantity Quantity of solar systems to mint.\\n   */\\n  function mint(uint256 _quantity) external payable {\\n    require(msg.value >= price * _quantity, \\\"Insufficient fee\\\");\\n    require(totalSupply() + _quantity <= maxSupply, \\\"Exceeds max supply\\\");\\n    _mint(msg.sender, _quantity);\\n  }\\n\\n  /**\\n   * @notice  Airdrops solar systems to a list of recipients. Only callable by the contract owner.\\n   * @param _recipients List of recipients to receive the airdrop.\\n   * @param _quantity Quantity of solar systems to airdrop to each recipient.\\n   */\\n  function airdrop(address[] memory _recipients, uint256 _quantity) external payable onlyOwner {\\n    require(totalSupply() + _quantity * _recipients.length <= maxSupply, \\\"Exceeds max supply\\\");\\n    for (uint256 i = 0; i < _recipients.length; i++) {\\n      _mint(_recipients[i], _quantity);\\n    }\\n  }\\n\\n  /**\\n   * @notice Withdraws the contract's balance. Only callable by the contract owner.\\n   */\\n  function withdraw() external onlyOwner {\\n    require(payable(msg.sender).send(address(this).balance));\\n  }\\n}\\n\",\"keccak256\":\"0x556a28a0e645a7190bbfd2a99d23616900da0f9d81a89a108cb7a6f3e3940090\",\"license\":\"MIT\"},\"contracts/Trigonometry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\\n *\\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\\n *\\n * Compared to Lefteris' implementation, this version makes the following changes:\\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\\n *   - Updated for Solidity 0.8.x\\n *   - Various gas optimizations\\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\\n *     integer format used by the algorithm\\n *\\n * Lefertis' implementation is based off Dave Dribin's trigint C library\\n *     http://www.dribin.org/dave/trigint/\\n *\\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\\n */\\nlibrary Trigonometry {\\n  // Table index into the trigonometric table\\n  uint256 constant INDEX_WIDTH = 8;\\n  // Interpolation between successive entries in the table\\n  uint256 constant INTERP_WIDTH = 16;\\n  uint256 constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n  uint256 constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n  uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n  uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n  uint32 constant QUADRANT_LOW_MASK = 268435456;\\n  uint256 constant SINE_TABLE_SIZE = 256;\\n\\n  // Pi as an 18 decimal value, which is plenty of accuracy: \\\"For JPL's highest accuracy calculations, which are for\\n  // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\\n  uint256 constant PI = 3141592653589793238;\\n  uint256 constant TWO_PI = 2 * PI;\\n  uint256 constant PI_OVER_TWO = PI / 2;\\n\\n  // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\\n  // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\\n  // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\\n  // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\\n  // 256 defined above)\\n  uint8 constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\\n  uint256 constant entry_mask = ((1 << (8 * entry_bytes)) - 1); // mask used to cast bytes32 -> lookup table entry\\n  bytes constant sin_table =\\n    hex\\\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\\\";\\n\\n  /**\\n   * @notice Return the sine of a value, specified in radians scaled by 1e18\\n   * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\\n   * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\\n   * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\\n   * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\\n   * range of -1 to 1, again scaled by 1e18\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function sin(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\\n      // of 0 to 1,073,741,824\\n      _angle = (ANGLES_IN_CYCLE * (_angle % TWO_PI)) / TWO_PI;\\n\\n      // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\\n      // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\\n      // and the offset is the offset of the bits (in bits) we want to extract. The result is an\\n      // integer containing _width bits of _value starting at the offset bit\\n      uint256 interp = (_angle >> INTERP_OFFSET) & ((1 << INTERP_WIDTH) - 1);\\n      uint256 index = (_angle >> INDEX_OFFSET) & ((1 << INDEX_WIDTH) - 1);\\n\\n      // The lookup table only contains data for one quadrant (since sin is symmetric around both\\n      // axes), so here we figure out which quadrant we're in, then we lookup the values in the\\n      // table then modify values accordingly\\n      bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n      bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n      if (!is_odd_quadrant) {\\n        index = SINE_TABLE_SIZE - 1 - index;\\n      }\\n\\n      bytes memory table = sin_table;\\n      // We are looking for two consecutive indices in our lookup table\\n      // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\\n      // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\\n      uint256 offset1_2 = (index + 2) * entry_bytes;\\n\\n      // This following snippet will function for any entry_bytes <= 15\\n      uint256 x1_2;\\n      assembly {\\n        // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\\n        x1_2 := mload(add(table, offset1_2))\\n      }\\n\\n      // We now read the last two numbers of size entry_bytes from x1_2\\n      // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\\n      // therefore: entry_mask = 0xFFFFFFFF\\n\\n      // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\\n      // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\\n      uint256 x1 = (x1_2 >> (8 * entry_bytes)) & entry_mask;\\n      // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\\n      uint256 x2 = x1_2 & entry_mask;\\n\\n      // Approximate angle by interpolating in the table, accounting for the quadrant\\n      uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\\n      int256 sine = is_odd_quadrant ? int256(x1) + int256(approximation) : int256(x2) - int256(approximation);\\n      if (is_negative_quadrant) {\\n        sine *= -1;\\n      }\\n\\n      // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\\n      // This can never overflow because sine is bounded by the above values\\n      return (sine * 1e18) / 2_147_483_647;\\n    }\\n  }\\n\\n  /**\\n   * @notice Return the cosine of a value, specified in radians scaled by 1e18\\n   * @dev This is identical to the sin() method, and just computes the value by delegating to the\\n   * sin() method using the identity cos(x) = sin(x + pi/2)\\n   * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function cos(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      return sin(_angle + PI_OVER_TWO);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6efee204682c447c9b90e2acf39b6e28286c8e64db156aa1d5d51965eeac248b\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xe694910e765b3804915b600a0b52452c4dccfeef7ff39b562da2376484d666c1\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @title ERC721A\\n *\\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\\n * Non-Fungible Token Standard, including the Metadata extension.\\n * Optimized for lower gas during batch mints.\\n *\\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\\n * starting from `_startTokenId()`.\\n *\\n * Assumptions:\\n *\\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\\n    struct TokenApprovalRef {\\n        address value;\\n    }\\n\\n    // =============================================================\\n    //                           CONSTANTS\\n    // =============================================================\\n\\n    // Mask of an entry in packed address data.\\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant _BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The `Transfer` event signature is given by:\\n    // `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\n\\n    // =============================================================\\n    //                            STORAGE\\n    // =============================================================\\n\\n    // The next token ID to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See {_packedOwnershipOf} implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // =============================================================\\n    //                          CONSTRUCTOR\\n    // =============================================================\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    // =============================================================\\n    //                   TOKEN COUNTING OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\\n        // and it is initialized to `_startTokenId()`.\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view virtual returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    // =============================================================\\n    //                    ADDRESS DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal virtual {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes\\n        // of the XOR of all function selectors in the interface.\\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    // =============================================================\\n    //                     OWNERSHIPS OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal virtual {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & _BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an initialized ownership slot\\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\\n                        // before an unintialized ownership slot\\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\\n                        // Hence, `curr` will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed will be zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & _BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      APPROVAL OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) public payable virtual override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId].value = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId].value;\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted. See {_mint}.\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\\n     */\\n    function _isSenderApprovedOrOwner(\\n        address approvedAddress,\\n        address owner,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, _BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\\n            // `msgSender == owner || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedSlotAndAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\\n        assembly {\\n            approvedAddressSlot := tokenApproval.slot\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    // =============================================================\\n    //                      TRANSFER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public payable virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public payable virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token IDs\\n     * are about to be transferred. This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token IDs\\n     * have been transferred. This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * `startTokenId` - the first token ID to be transferred.\\n     * `quantity` - the amount to be transferred.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * `from` - Previous owner of the given token ID.\\n     * `to` - Target address that will receive the token.\\n     * `tokenId` - Token ID to be transferred.\\n     * `_data` - Optional data to send along with the call.\\n     *\\n     * Returns whether the call correctly returned the expected magic value.\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    // =============================================================\\n    //                        MINT OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 toMasked;\\n            uint256 end = startTokenId + quantity;\\n\\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\\n            // The assembly, together with the surrounding Solidity code, have been\\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\\n            assembly {\\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n                toMasked := and(to, _BITMASK_ADDRESS)\\n                // Emit the `Transfer` event.\\n                log4(\\n                    0, // Start of data (0, since no data).\\n                    0, // End of data (0, since no data).\\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\\n                    0, // `address(0)`.\\n                    toMasked, // `to`.\\n                    startTokenId // `tokenId`.\\n                )\\n\\n                // The `iszero(eq(,))` check ensures that large values of `quantity`\\n                // that overflows uint256 will make the loop run out of gas.\\n                // The compiler will optimize the `iszero` away for performance.\\n                for {\\n                    let tokenId := add(startTokenId, 1)\\n                } iszero(eq(tokenId, end)) {\\n                    tokenId := add(tokenId, 1)\\n                } {\\n                    // Emit the `Transfer` event. Similar to above.\\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\\n                }\\n            }\\n            if (toMasked == 0) revert MintToZeroAddress();\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    // =============================================================\\n    //                        BURN OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    // =============================================================\\n    //                     EXTRA DATA OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\\n    }\\n\\n    // =============================================================\\n    //                       OTHER OPERATIONS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a uint256 to its ASCII string decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\\n            let m := add(mload(0x40), 0xa0)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, m)\\n            // Assign the `str` to the end.\\n            str := sub(m, 0x20)\\n            // Zeroize the slot after the string.\\n            mstore(str, 0)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := str\\n\\n            // We write the string from rightmost digit to leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // prettier-ignore\\n            for { let temp := value } 1 {} {\\n                str := sub(str, 1)\\n                // Write the character to the pointer.\\n                // The ASCII index of the '0' character is 48.\\n                mstore8(str, add(48, mod(temp, 10)))\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n                // prettier-ignore\\n                if iszero(temp) { break }\\n            }\\n\\n            let length := sub(end, str)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            str := sub(str, 0x20)\\n            // Store the length.\\n            mstore(str, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23116c16976b7d8c0c714ba1b38ae6b16c16fc90ec69b568fb1ebf1bc063e01c\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0xa31dfe2635a25f899e279befef27ffcc02fd16e636c58d4c251a303f2355f7ad\",\"license\":\"MIT\"},\"svgnft/contracts/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos <brecht@loopring.org>\\nlibrary Base64 {\\n  bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n  /// @notice Encodes some bytes to the base64 representation\\n  function encode(bytes memory data) internal pure returns (string memory) {\\n    uint256 len = data.length;\\n    if (len == 0) return \\\"\\\";\\n\\n    // multiply by 4/3 rounded up\\n    uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n    // Add some extra buffer at the end\\n    bytes memory result = new bytes(encodedLen + 32);\\n\\n    bytes memory table = TABLE;\\n\\n    assembly {\\n      let tablePtr := add(table, 1)\\n      let resultPtr := add(result, 32)\\n\\n      for {\\n        let i := 0\\n      } lt(i, len) {\\n\\n      } {\\n        i := add(i, 3)\\n        let input := and(mload(add(data, i)), 0xffffff)\\n\\n        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n        out := shl(8, out)\\n        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n        out := shl(224, out)\\n\\n        mstore(resultPtr, out)\\n\\n        resultPtr := add(resultPtr, 4)\\n      }\\n\\n      switch mod(len, 3)\\n      case 1 {\\n        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n      }\\n      case 2 {\\n        mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n      }\\n\\n      mstore(result, encodedLen)\\n    }\\n\\n    return string(result);\\n  }\\n}\\n\",\"keccak256\":\"0xe0cf4b1dfbce881f759d02a1ae0148ed25ca0fd8fd1ca4b14fd58479095b80b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620039d2380380620039d28339818101604052810190620000379190620003f5565b848481600290816200004a9190620006fc565b5080600390816200005c9190620006fc565b506200006d620000ef60201b60201c565b60008190555050506200009562000089620000f460201b60201c565b620000fc60201b60201c565b8260098190555081600a8190555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050620007e3565b600090565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022b82620001e0565b810181811067ffffffffffffffff821117156200024d576200024c620001f1565b5b80604052505050565b600062000262620001c2565b905062000270828262000220565b919050565b600067ffffffffffffffff821115620002935762000292620001f1565b5b6200029e82620001e0565b9050602081019050919050565b60005b83811015620002cb578082015181840152602081019050620002ae565b60008484015250505050565b6000620002ee620002e88462000275565b62000256565b9050828152602081018484840111156200030d576200030c620001db565b5b6200031a848285620002ab565b509392505050565b600082601f8301126200033a5762000339620001d6565b5b81516200034c848260208601620002d7565b91505092915050565b6000819050919050565b6200036a8162000355565b81146200037657600080fd5b50565b6000815190506200038a816200035f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003bd8262000390565b9050919050565b620003cf81620003b0565b8114620003db57600080fd5b50565b600081519050620003ef81620003c4565b92915050565b600080600080600060a08688031215620004145762000413620001cc565b5b600086015167ffffffffffffffff811115620004355762000434620001d1565b5b620004438882890162000322565b955050602086015167ffffffffffffffff811115620004675762000466620001d1565b5b620004758882890162000322565b9450506040620004888882890162000379565b93505060606200049b8882890162000379565b9250506080620004ae88828901620003de565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200050e57607f821691505b602082108103620005245762000523620004c6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200058e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200054f565b6200059a86836200054f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005dd620005d7620005d18462000355565b620005b2565b62000355565b9050919050565b6000819050919050565b620005f983620005bc565b620006116200060882620005e4565b8484546200055c565b825550505050565b600090565b6200062862000619565b62000635818484620005ee565b505050565b5b818110156200065d57620006516000826200061e565b6001810190506200063b565b5050565b601f821115620006ac5762000676816200052a565b62000681846200053f565b8101602085101562000691578190505b620006a9620006a0856200053f565b8301826200063a565b50505b505050565b600082821c905092915050565b6000620006d160001984600802620006b1565b1980831691505092915050565b6000620006ec8383620006be565b9150826002028217905092915050565b6200070782620004bb565b67ffffffffffffffff811115620007235762000722620001f1565b5b6200072f8254620004f5565b6200073c82828562000661565b600060209050601f8311600181146200077457600084156200075f578287015190505b6200076b8582620006de565b865550620007db565b601f19841662000784866200052a565b60005b82811015620007ae5784890151825560018201915060208501945060208101905062000787565b86831015620007ce5784890151620007ca601f891682620006be565b8355505b6001600288020188555050505b505050505050565b6131df80620007f36000396000f3fe6080604052600436106101405760003560e01c80638ada6b0f116100b6578063b88d4fde1161006f578063b88d4fde14610402578063c204642c1461041e578063c87b56dd1461043a578063d5abeb0114610477578063e985e9c5146104a2578063f2fde38b146104df57610140565b80638ada6b0f146103115780638da5cb5b1461033c57806395d89b4114610367578063a035b1fe14610392578063a0712d68146103bd578063a22cb465146103d957610140565b806323b872dd1161010857806323b872dd146102315780633ccfd60b1461024d57806342842e0e146102645780636352211e1461028057806370a08231146102bd578063715018a6146102fa57610140565b806301ffc9a71461014557806306fdde0314610182578063081812fc146101ad578063095ea7b3146101ea57806318160ddd14610206575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190611f44565b610508565b6040516101799190611f8c565b60405180910390f35b34801561018e57600080fd5b5061019761059a565b6040516101a49190612037565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf919061208f565b61062c565b6040516101e191906120fd565b60405180910390f35b61020460048036038101906101ff9190612144565b6106ab565b005b34801561021257600080fd5b5061021b6107ef565b6040516102289190612193565b60405180910390f35b61024b600480360381019061024691906121ae565b610806565b005b34801561025957600080fd5b50610262610b28565b005b61027e600480360381019061027991906121ae565b610b70565b005b34801561028c57600080fd5b506102a760048036038101906102a2919061208f565b610b90565b6040516102b491906120fd565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df9190612201565b610ba2565b6040516102f19190612193565b60405180910390f35b34801561030657600080fd5b5061030f610c5a565b005b34801561031d57600080fd5b50610326610c6e565b604051610333919061228d565b60405180910390f35b34801561034857600080fd5b50610351610c94565b60405161035e91906120fd565b60405180910390f35b34801561037357600080fd5b5061037c610cbe565b6040516103899190612037565b60405180910390f35b34801561039e57600080fd5b506103a7610d50565b6040516103b49190612193565b60405180910390f35b6103d760048036038101906103d2919061208f565b610d56565b005b3480156103e557600080fd5b5061040060048036038101906103fb91906122d4565b610e0a565b005b61041c60048036038101906104179190612449565b610f15565b005b61043860048036038101906104339190612594565b610f88565b005b34801561044657600080fd5b50610461600480360381019061045c919061208f565b61103b565b60405161046e9190612037565b60405180910390f35b34801561048357600080fd5b5061048c61142a565b6040516104999190612193565b60405180910390f35b3480156104ae57600080fd5b506104c960048036038101906104c491906125f0565b611430565b6040516104d69190611f8c565b60405180910390f35b3480156104eb57600080fd5b5061050660048036038101906105019190612201565b6114c4565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056357506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105935750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600280546105a99061265f565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061265f565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611547565b61066d576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106b682610b90565b90508073ffffffffffffffffffffffffffffffffffffffff166106d76115a6565b73ffffffffffffffffffffffffffffffffffffffff161461073a57610703816106fe6115a6565b611430565b610739576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006107f96115ae565b6001546000540303905090565b6000610811826115b3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610878576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806108848461167f565b9150915061089a81876108956115a6565b6116a6565b6108e6576108af866108aa6115a6565b611430565b6108e5576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361094c576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095986868660016116ea565b801561096457600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610a3285610a0e8888876116f0565b7c020000000000000000000000000000000000000000000000000000000017611718565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610ab85760006001850190506000600460008381526020019081526020016000205403610ab6576000548114610ab5578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b208686866001611743565b505050505050565b610b30611749565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050610b6e57600080fd5b565b610b8b83838360405180602001604052806000815250610f15565b505050565b6000610b9b826115b3565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c09576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b610c62611749565b610c6c60006117c7565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610ccd9061265f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf99061265f565b8015610d465780601f10610d1b57610100808354040283529160200191610d46565b820191906000526020600020905b815481529060010190602001808311610d2957829003601f168201915b5050505050905090565b60095481565b80600954610d6491906126bf565b341015610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90612765565b60405180910390fd5b600a5481610db26107ef565b610dbc9190612785565b1115610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490612805565b60405180910390fd5b610e07338261188d565b50565b8060076000610e176115a6565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610ec46115a6565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f099190611f8c565b60405180910390a35050565b610f20848484610806565b60008373ffffffffffffffffffffffffffffffffffffffff163b14610f8257610f4b84848484611a48565b610f81576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b610f90611749565b600a54825182610fa091906126bf565b610fa86107ef565b610fb29190612785565b1115610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea90612805565b60405180910390fd5b60005b82518110156110365761102383828151811061101557611014612825565b5b60200260200101518361188d565b808061102e90612854565b915050610ff6565b505050565b606061104682611547565b61107c576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061108783611b98565b6040516020016110979190612924565b604051602081830303815290604052905060006040518060600160405280603f815260200161312b603f913990506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be985ac9866040518263ffffffff1660e01b81526004016111229190612193565b600060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061116891906129e7565b905060008383611212600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd01884f8a6040518263ffffffff1660e01b81526004016111cc9190612193565b602060405180830381865afa1580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190612a45565b611b98565b6112b6600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663398820ff8b6040518263ffffffff1660e01b81526004016112709190612193565b602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190612a45565b611b98565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634716826c8b6040518263ffffffff1660e01b81526004016113119190612193565b602060405180830381865afa15801561132e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113529190612a87565b611391576040518060400160405280600681526020017f4e6f726d616c00000000000000000000000000000000000000000000000000008152506113c8565b6040518060400160405280600481526020017f426c7565000000000000000000000000000000000000000000000000000000008152505b6113d187611d20565b6040516020016113e696959493929190612d60565b604051602081830303815290604052905061140081611d20565b6040516020016114109190612e51565b604051602081830303815290604052945050505050919050565b600a5481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114cc611749565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361153b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153290612ee5565b60405180910390fd5b611544816117c7565b50565b6000816115526115ae565b11158015611561575060005482105b801561159f575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b600080829050806115c26115ae565b11611648576000548110156116475760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603611645575b6000810361163b576004600083600190039350838152602001908152602001600020549050611611565b809250505061167a565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611707868684611eb7565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b611751611ec0565b73ffffffffffffffffffffffffffffffffffffffff1661176f610c94565b73ffffffffffffffffffffffffffffffffffffffff16146117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bc90612f51565b60405180910390fd5b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080549050600082036118cd576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118da60008483856116ea565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506119518361194260008660006116f0565b61194b85611ec8565b17611718565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b8181146119f257808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a46001810190506119b7565b5060008203611a2d576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000819055505050611a436000848385611743565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a6e6115a6565b8786866040518563ffffffff1660e01b8152600401611a909493929190612fc6565b6020604051808303816000875af1925050508015611acc57506040513d601f19601f82011682018060405250810190611ac99190613027565b60015b611b45573d8060008114611afc576040519150601f19603f3d011682016040523d82523d6000602084013e611b01565b606091505b506000815103611b3d576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060008203611bdf576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611d1b565b600082905060005b60008214611c11578080611bfa90612854565b915050600a82611c0a9190613083565b9150611be7565b60008167ffffffffffffffff811115611c2d57611c2c61231e565b5b6040519080825280601f01601f191660200182016040528015611c5f5781602001600182028036833780820191505090505b50905060008290505b60008614611d1357600181611c7d91906130b4565b90506000600a8088611c8f9190613083565b611c9991906126bf565b87611ca491906130b4565b6030611cb091906130f5565b905060008160f81b905080848481518110611cce57611ccd612825565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88611d0a9190613083565b97505050611c68565b819450505050505b919050565b606060008251905060008103611d485760405180602001604052806000815250915050611eb2565b60006003600283611d599190612785565b611d639190613083565b6004611d6f91906126bf565b90506000602082611d809190612785565b67ffffffffffffffff811115611d9957611d9861231e565b5b6040519080825280601f01601f191660200182016040528015611dcb5781602001600182028036833780820191505090505b509050600060405180606001604052806040815260200161316a604091399050600181016020830160005b86811015611e6f5760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b90508084526004840193505050611df6565b506003860660018114611e895760028114611e9957611ea4565b613d3d60f01b6002830352611ea4565b603d60f81b60018303525b508484525050819450505050505b919050565b60009392505050565b600033905090565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f2181611eec565b8114611f2c57600080fd5b50565b600081359050611f3e81611f18565b92915050565b600060208284031215611f5a57611f59611ee2565b5b6000611f6884828501611f2f565b91505092915050565b60008115159050919050565b611f8681611f71565b82525050565b6000602082019050611fa16000830184611f7d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fe1578082015181840152602081019050611fc6565b60008484015250505050565b6000601f19601f8301169050919050565b600061200982611fa7565b6120138185611fb2565b9350612023818560208601611fc3565b61202c81611fed565b840191505092915050565b600060208201905081810360008301526120518184611ffe565b905092915050565b6000819050919050565b61206c81612059565b811461207757600080fd5b50565b60008135905061208981612063565b92915050565b6000602082840312156120a5576120a4611ee2565b5b60006120b38482850161207a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120e7826120bc565b9050919050565b6120f7816120dc565b82525050565b600060208201905061211260008301846120ee565b92915050565b612121816120dc565b811461212c57600080fd5b50565b60008135905061213e81612118565b92915050565b6000806040838503121561215b5761215a611ee2565b5b60006121698582860161212f565b925050602061217a8582860161207a565b9150509250929050565b61218d81612059565b82525050565b60006020820190506121a86000830184612184565b92915050565b6000806000606084860312156121c7576121c6611ee2565b5b60006121d58682870161212f565b93505060206121e68682870161212f565b92505060406121f78682870161207a565b9150509250925092565b60006020828403121561221757612216611ee2565b5b60006122258482850161212f565b91505092915050565b6000819050919050565b600061225361224e612249846120bc565b61222e565b6120bc565b9050919050565b600061226582612238565b9050919050565b60006122778261225a565b9050919050565b6122878161226c565b82525050565b60006020820190506122a2600083018461227e565b92915050565b6122b181611f71565b81146122bc57600080fd5b50565b6000813590506122ce816122a8565b92915050565b600080604083850312156122eb576122ea611ee2565b5b60006122f98582860161212f565b925050602061230a858286016122bf565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61235682611fed565b810181811067ffffffffffffffff821117156123755761237461231e565b5b80604052505050565b6000612388611ed8565b9050612394828261234d565b919050565b600067ffffffffffffffff8211156123b4576123b361231e565b5b6123bd82611fed565b9050602081019050919050565b82818337600083830152505050565b60006123ec6123e784612399565b61237e565b90508281526020810184848401111561240857612407612319565b5b6124138482856123ca565b509392505050565b600082601f8301126124305761242f612314565b5b81356124408482602086016123d9565b91505092915050565b6000806000806080858703121561246357612462611ee2565b5b60006124718782880161212f565b94505060206124828782880161212f565b93505060406124938782880161207a565b925050606085013567ffffffffffffffff8111156124b4576124b3611ee7565b5b6124c08782880161241b565b91505092959194509250565b600067ffffffffffffffff8211156124e7576124e661231e565b5b602082029050602081019050919050565b600080fd5b600061251061250b846124cc565b61237e565b90508083825260208201905060208402830185811115612533576125326124f8565b5b835b8181101561255c5780612548888261212f565b845260208401935050602081019050612535565b5050509392505050565b600082601f83011261257b5761257a612314565b5b813561258b8482602086016124fd565b91505092915050565b600080604083850312156125ab576125aa611ee2565b5b600083013567ffffffffffffffff8111156125c9576125c8611ee7565b5b6125d585828601612566565b92505060206125e68582860161207a565b9150509250929050565b6000806040838503121561260757612606611ee2565b5b60006126158582860161212f565b92505060206126268582860161212f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061267757607f821691505b60208210810361268a57612689612630565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ca82612059565b91506126d583612059565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561270e5761270d612690565b5b828202905092915050565b7f496e73756666696369656e742066656500000000000000000000000000000000600082015250565b600061274f601083611fb2565b915061275a82612719565b602082019050919050565b6000602082019050818103600083015261277e81612742565b9050919050565b600061279082612059565b915061279b83612059565b92508282019050808211156127b3576127b2612690565b5b92915050565b7f45786365656473206d617820737570706c790000000000000000000000000000600082015250565b60006127ef601283611fb2565b91506127fa826127b9565b602082019050919050565b6000602082019050818103600083015261281e816127e2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061285f82612059565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361289157612890612690565b5b600182019050919050565b600081905092915050565b7f536f6c61722053797374656d2023000000000000000000000000000000000000600082015250565b60006128dd600e8361289c565b91506128e8826128a7565b600e82019050919050565b60006128fe82611fa7565b612908818561289c565b9350612918818560208601611fc3565b80840191505092915050565b600061292f826128d0565b915061293b82846128f3565b915081905092915050565b600067ffffffffffffffff8211156129615761296061231e565b5b61296a82611fed565b9050602081019050919050565b600061298a61298584612946565b61237e565b9050828152602081018484840111156129a6576129a5612319565b5b6129b1848285611fc3565b509392505050565b600082601f8301126129ce576129cd612314565b5b81516129de848260208601612977565b91505092915050565b6000602082840312156129fd576129fc611ee2565b5b600082015167ffffffffffffffff811115612a1b57612a1a611ee7565b5b612a27848285016129b9565b91505092915050565b600081519050612a3f81612063565b92915050565b600060208284031215612a5b57612a5a611ee2565b5b6000612a6984828501612a30565b91505092915050565b600081519050612a81816122a8565b92915050565b600060208284031215612a9d57612a9c611ee2565b5b6000612aab84828501612a72565b91505092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b6000612aea60098361289c565b9150612af582612ab4565b600982019050919050565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600082015250565b6000612b3660118361289c565b9150612b4182612b00565b601182019050919050565b7f222c2261747472696275746573223a5b7b2274726169745f74797065223a225060008201527f6c616e657473222c2276616c7565223a22000000000000000000000000000000602082015250565b6000612ba860318361289c565b9150612bb382612b4c565b603182019050919050565b7f227d2c207b2274726169745f74797065223a2252696e67656420506c616e657460008201527f73222c202276616c7565223a2022000000000000000000000000000000000000602082015250565b6000612c1a602e8361289c565b9150612c2582612bbe565b602e82019050919050565b7f227d2c207b2274726169745f74797065223a22537461722054797065222c202260008201527f76616c7565223a20220000000000000000000000000000000000000000000000602082015250565b6000612c8c60298361289c565b9150612c9782612c30565b602982019050919050565b7f227d5d2c2022696d616765223a2022646174613a696d6167652f7376672b786d60008201527f6c3b6261736536342c0000000000000000000000000000000000000000000000602082015250565b6000612cfe60298361289c565b9150612d0982612ca2565b602982019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000612d4a60028361289c565b9150612d5582612d14565b600282019050919050565b6000612d6b82612add565b9150612d7782896128f3565b9150612d8282612b29565b9150612d8e82886128f3565b9150612d9982612b9b565b9150612da582876128f3565b9150612db082612c0d565b9150612dbc82866128f3565b9150612dc782612c7f565b9150612dd382856128f3565b9150612dde82612cf1565b9150612dea82846128f3565b9150612df582612d3d565b9150819050979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612e3b601d8361289c565b9150612e4682612e05565b601d82019050919050565b6000612e5c82612e2e565b9150612e6882846128f3565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ecf602683611fb2565b9150612eda82612e73565b604082019050919050565b60006020820190508181036000830152612efe81612ec2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612f3b602083611fb2565b9150612f4682612f05565b602082019050919050565b60006020820190508181036000830152612f6a81612f2e565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f9882612f71565b612fa28185612f7c565b9350612fb2818560208601611fc3565b612fbb81611fed565b840191505092915050565b6000608082019050612fdb60008301876120ee565b612fe860208301866120ee565b612ff56040830185612184565b81810360608301526130078184612f8d565b905095945050505050565b60008151905061302181611f18565b92915050565b60006020828403121561303d5761303c611ee2565b5b600061304b84828501613012565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061308e82612059565b915061309983612059565b9250826130a9576130a8613054565b5b828204905092915050565b60006130bf82612059565b91506130ca83612059565b92508282039050818111156130e2576130e1612690565b5b92915050565b600060ff82169050919050565b6000613100826130e8565b915061310b836130e8565b9250828201905060ff81111561312457613123612690565b5b9291505056fe46756c6c79206f6e2d636861696e2c2070726f6365647572616c6c792067656e6572617465642c20616e696d6174656420736f6c61722073797374656d732e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fb92cbbfce2cb70fff6a07f6b7ef6ca48124aaae5968d7e0979ced3a2318bf5664736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80638ada6b0f116100b6578063b88d4fde1161006f578063b88d4fde14610402578063c204642c1461041e578063c87b56dd1461043a578063d5abeb0114610477578063e985e9c5146104a2578063f2fde38b146104df57610140565b80638ada6b0f146103115780638da5cb5b1461033c57806395d89b4114610367578063a035b1fe14610392578063a0712d68146103bd578063a22cb465146103d957610140565b806323b872dd1161010857806323b872dd146102315780633ccfd60b1461024d57806342842e0e146102645780636352211e1461028057806370a08231146102bd578063715018a6146102fa57610140565b806301ffc9a71461014557806306fdde0314610182578063081812fc146101ad578063095ea7b3146101ea57806318160ddd14610206575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190611f44565b610508565b6040516101799190611f8c565b60405180910390f35b34801561018e57600080fd5b5061019761059a565b6040516101a49190612037565b60405180910390f35b3480156101b957600080fd5b506101d460048036038101906101cf919061208f565b61062c565b6040516101e191906120fd565b60405180910390f35b61020460048036038101906101ff9190612144565b6106ab565b005b34801561021257600080fd5b5061021b6107ef565b6040516102289190612193565b60405180910390f35b61024b600480360381019061024691906121ae565b610806565b005b34801561025957600080fd5b50610262610b28565b005b61027e600480360381019061027991906121ae565b610b70565b005b34801561028c57600080fd5b506102a760048036038101906102a2919061208f565b610b90565b6040516102b491906120fd565b60405180910390f35b3480156102c957600080fd5b506102e460048036038101906102df9190612201565b610ba2565b6040516102f19190612193565b60405180910390f35b34801561030657600080fd5b5061030f610c5a565b005b34801561031d57600080fd5b50610326610c6e565b604051610333919061228d565b60405180910390f35b34801561034857600080fd5b50610351610c94565b60405161035e91906120fd565b60405180910390f35b34801561037357600080fd5b5061037c610cbe565b6040516103899190612037565b60405180910390f35b34801561039e57600080fd5b506103a7610d50565b6040516103b49190612193565b60405180910390f35b6103d760048036038101906103d2919061208f565b610d56565b005b3480156103e557600080fd5b5061040060048036038101906103fb91906122d4565b610e0a565b005b61041c60048036038101906104179190612449565b610f15565b005b61043860048036038101906104339190612594565b610f88565b005b34801561044657600080fd5b50610461600480360381019061045c919061208f565b61103b565b60405161046e9190612037565b60405180910390f35b34801561048357600080fd5b5061048c61142a565b6040516104999190612193565b60405180910390f35b3480156104ae57600080fd5b506104c960048036038101906104c491906125f0565b611430565b6040516104d69190611f8c565b60405180910390f35b3480156104eb57600080fd5b5061050660048036038101906105019190612201565b6114c4565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061056357506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806105935750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6060600280546105a99061265f565b80601f01602080910402602001604051908101604052809291908181526020018280546105d59061265f565b80156106225780601f106105f757610100808354040283529160200191610622565b820191906000526020600020905b81548152906001019060200180831161060557829003601f168201915b5050505050905090565b600061063782611547565b61066d576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106b682610b90565b90508073ffffffffffffffffffffffffffffffffffffffff166106d76115a6565b73ffffffffffffffffffffffffffffffffffffffff161461073a57610703816106fe6115a6565b611430565b610739576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b60006107f96115ae565b6001546000540303905090565b6000610811826115b3565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610878576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806108848461167f565b9150915061089a81876108956115a6565b6116a6565b6108e6576108af866108aa6115a6565b611430565b6108e5576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361094c576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095986868660016116ea565b801561096457600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610a3285610a0e8888876116f0565b7c020000000000000000000000000000000000000000000000000000000017611718565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610ab85760006001850190506000600460008381526020019081526020016000205403610ab6576000548114610ab5578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610b208686866001611743565b505050505050565b610b30611749565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050610b6e57600080fd5b565b610b8b83838360405180602001604052806000815250610f15565b505050565b6000610b9b826115b3565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c09576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b610c62611749565b610c6c60006117c7565b565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060038054610ccd9061265f565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf99061265f565b8015610d465780601f10610d1b57610100808354040283529160200191610d46565b820191906000526020600020905b815481529060010190602001808311610d2957829003601f168201915b5050505050905090565b60095481565b80600954610d6491906126bf565b341015610da6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9d90612765565b60405180910390fd5b600a5481610db26107ef565b610dbc9190612785565b1115610dfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df490612805565b60405180910390fd5b610e07338261188d565b50565b8060076000610e176115a6565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610ec46115a6565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f099190611f8c565b60405180910390a35050565b610f20848484610806565b60008373ffffffffffffffffffffffffffffffffffffffff163b14610f8257610f4b84848484611a48565b610f81576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b610f90611749565b600a54825182610fa091906126bf565b610fa86107ef565b610fb29190612785565b1115610ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fea90612805565b60405180910390fd5b60005b82518110156110365761102383828151811061101557611014612825565b5b60200260200101518361188d565b808061102e90612854565b915050610ff6565b505050565b606061104682611547565b61107c576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061108783611b98565b6040516020016110979190612924565b604051602081830303815290604052905060006040518060600160405280603f815260200161312b603f913990506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663be985ac9866040518263ffffffff1660e01b81526004016111229190612193565b600060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061116891906129e7565b905060008383611212600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd01884f8a6040518263ffffffff1660e01b81526004016111cc9190612193565b602060405180830381865afa1580156111e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120d9190612a45565b611b98565b6112b6600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663398820ff8b6040518263ffffffff1660e01b81526004016112709190612193565b602060405180830381865afa15801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190612a45565b611b98565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634716826c8b6040518263ffffffff1660e01b81526004016113119190612193565b602060405180830381865afa15801561132e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113529190612a87565b611391576040518060400160405280600681526020017f4e6f726d616c00000000000000000000000000000000000000000000000000008152506113c8565b6040518060400160405280600481526020017f426c7565000000000000000000000000000000000000000000000000000000008152505b6113d187611d20565b6040516020016113e696959493929190612d60565b604051602081830303815290604052905061140081611d20565b6040516020016114109190612e51565b604051602081830303815290604052945050505050919050565b600a5481565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114cc611749565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361153b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153290612ee5565b60405180910390fd5b611544816117c7565b50565b6000816115526115ae565b11158015611561575060005482105b801561159f575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600090565b600080829050806115c26115ae565b11611648576000548110156116475760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603611645575b6000810361163b576004600083600190039350838152602001908152602001600020549050611611565b809250505061167a565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8611707868684611eb7565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b611751611ec0565b73ffffffffffffffffffffffffffffffffffffffff1661176f610c94565b73ffffffffffffffffffffffffffffffffffffffff16146117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bc90612f51565b60405180910390fd5b565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080549050600082036118cd576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6118da60008483856116ea565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055506119518361194260008660006116f0565b61194b85611ec8565b17611718565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b8181146119f257808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a46001810190506119b7565b5060008203611a2d576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000819055505050611a436000848385611743565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a6e6115a6565b8786866040518563ffffffff1660e01b8152600401611a909493929190612fc6565b6020604051808303816000875af1925050508015611acc57506040513d601f19601f82011682018060405250810190611ac99190613027565b60015b611b45573d8060008114611afc576040519150601f19603f3d011682016040523d82523d6000602084013e611b01565b606091505b506000815103611b3d576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060008203611bdf576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611d1b565b600082905060005b60008214611c11578080611bfa90612854565b915050600a82611c0a9190613083565b9150611be7565b60008167ffffffffffffffff811115611c2d57611c2c61231e565b5b6040519080825280601f01601f191660200182016040528015611c5f5781602001600182028036833780820191505090505b50905060008290505b60008614611d1357600181611c7d91906130b4565b90506000600a8088611c8f9190613083565b611c9991906126bf565b87611ca491906130b4565b6030611cb091906130f5565b905060008160f81b905080848481518110611cce57611ccd612825565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88611d0a9190613083565b97505050611c68565b819450505050505b919050565b606060008251905060008103611d485760405180602001604052806000815250915050611eb2565b60006003600283611d599190612785565b611d639190613083565b6004611d6f91906126bf565b90506000602082611d809190612785565b67ffffffffffffffff811115611d9957611d9861231e565b5b6040519080825280601f01601f191660200182016040528015611dcb5781602001600182028036833780820191505090505b509050600060405180606001604052806040815260200161316a604091399050600181016020830160005b86811015611e6f5760038101905062ffffff818a015116603f8160121c168401518060081b905060ff603f83600c1c1686015116810190508060081b905060ff603f8360061c1686015116810190508060081b905060ff603f831686015116810190508060e01b90508084526004840193505050611df6565b506003860660018114611e895760028114611e9957611ea4565b613d3d60f01b6002830352611ea4565b603d60f81b60018303525b508484525050819450505050505b919050565b60009392505050565b600033905090565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f2181611eec565b8114611f2c57600080fd5b50565b600081359050611f3e81611f18565b92915050565b600060208284031215611f5a57611f59611ee2565b5b6000611f6884828501611f2f565b91505092915050565b60008115159050919050565b611f8681611f71565b82525050565b6000602082019050611fa16000830184611f7d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fe1578082015181840152602081019050611fc6565b60008484015250505050565b6000601f19601f8301169050919050565b600061200982611fa7565b6120138185611fb2565b9350612023818560208601611fc3565b61202c81611fed565b840191505092915050565b600060208201905081810360008301526120518184611ffe565b905092915050565b6000819050919050565b61206c81612059565b811461207757600080fd5b50565b60008135905061208981612063565b92915050565b6000602082840312156120a5576120a4611ee2565b5b60006120b38482850161207a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006120e7826120bc565b9050919050565b6120f7816120dc565b82525050565b600060208201905061211260008301846120ee565b92915050565b612121816120dc565b811461212c57600080fd5b50565b60008135905061213e81612118565b92915050565b6000806040838503121561215b5761215a611ee2565b5b60006121698582860161212f565b925050602061217a8582860161207a565b9150509250929050565b61218d81612059565b82525050565b60006020820190506121a86000830184612184565b92915050565b6000806000606084860312156121c7576121c6611ee2565b5b60006121d58682870161212f565b93505060206121e68682870161212f565b92505060406121f78682870161207a565b9150509250925092565b60006020828403121561221757612216611ee2565b5b60006122258482850161212f565b91505092915050565b6000819050919050565b600061225361224e612249846120bc565b61222e565b6120bc565b9050919050565b600061226582612238565b9050919050565b60006122778261225a565b9050919050565b6122878161226c565b82525050565b60006020820190506122a2600083018461227e565b92915050565b6122b181611f71565b81146122bc57600080fd5b50565b6000813590506122ce816122a8565b92915050565b600080604083850312156122eb576122ea611ee2565b5b60006122f98582860161212f565b925050602061230a858286016122bf565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61235682611fed565b810181811067ffffffffffffffff821117156123755761237461231e565b5b80604052505050565b6000612388611ed8565b9050612394828261234d565b919050565b600067ffffffffffffffff8211156123b4576123b361231e565b5b6123bd82611fed565b9050602081019050919050565b82818337600083830152505050565b60006123ec6123e784612399565b61237e565b90508281526020810184848401111561240857612407612319565b5b6124138482856123ca565b509392505050565b600082601f8301126124305761242f612314565b5b81356124408482602086016123d9565b91505092915050565b6000806000806080858703121561246357612462611ee2565b5b60006124718782880161212f565b94505060206124828782880161212f565b93505060406124938782880161207a565b925050606085013567ffffffffffffffff8111156124b4576124b3611ee7565b5b6124c08782880161241b565b91505092959194509250565b600067ffffffffffffffff8211156124e7576124e661231e565b5b602082029050602081019050919050565b600080fd5b600061251061250b846124cc565b61237e565b90508083825260208201905060208402830185811115612533576125326124f8565b5b835b8181101561255c5780612548888261212f565b845260208401935050602081019050612535565b5050509392505050565b600082601f83011261257b5761257a612314565b5b813561258b8482602086016124fd565b91505092915050565b600080604083850312156125ab576125aa611ee2565b5b600083013567ffffffffffffffff8111156125c9576125c8611ee7565b5b6125d585828601612566565b92505060206125e68582860161207a565b9150509250929050565b6000806040838503121561260757612606611ee2565b5b60006126158582860161212f565b92505060206126268582860161212f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061267757607f821691505b60208210810361268a57612689612630565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ca82612059565b91506126d583612059565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561270e5761270d612690565b5b828202905092915050565b7f496e73756666696369656e742066656500000000000000000000000000000000600082015250565b600061274f601083611fb2565b915061275a82612719565b602082019050919050565b6000602082019050818103600083015261277e81612742565b9050919050565b600061279082612059565b915061279b83612059565b92508282019050808211156127b3576127b2612690565b5b92915050565b7f45786365656473206d617820737570706c790000000000000000000000000000600082015250565b60006127ef601283611fb2565b91506127fa826127b9565b602082019050919050565b6000602082019050818103600083015261281e816127e2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061285f82612059565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361289157612890612690565b5b600182019050919050565b600081905092915050565b7f536f6c61722053797374656d2023000000000000000000000000000000000000600082015250565b60006128dd600e8361289c565b91506128e8826128a7565b600e82019050919050565b60006128fe82611fa7565b612908818561289c565b9350612918818560208601611fc3565b80840191505092915050565b600061292f826128d0565b915061293b82846128f3565b915081905092915050565b600067ffffffffffffffff8211156129615761296061231e565b5b61296a82611fed565b9050602081019050919050565b600061298a61298584612946565b61237e565b9050828152602081018484840111156129a6576129a5612319565b5b6129b1848285611fc3565b509392505050565b600082601f8301126129ce576129cd612314565b5b81516129de848260208601612977565b91505092915050565b6000602082840312156129fd576129fc611ee2565b5b600082015167ffffffffffffffff811115612a1b57612a1a611ee7565b5b612a27848285016129b9565b91505092915050565b600081519050612a3f81612063565b92915050565b600060208284031215612a5b57612a5a611ee2565b5b6000612a6984828501612a30565b91505092915050565b600081519050612a81816122a8565b92915050565b600060208284031215612a9d57612a9c611ee2565b5b6000612aab84828501612a72565b91505092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b6000612aea60098361289c565b9150612af582612ab4565b600982019050919050565b7f222c226465736372697074696f6e223a22000000000000000000000000000000600082015250565b6000612b3660118361289c565b9150612b4182612b00565b601182019050919050565b7f222c2261747472696275746573223a5b7b2274726169745f74797065223a225060008201527f6c616e657473222c2276616c7565223a22000000000000000000000000000000602082015250565b6000612ba860318361289c565b9150612bb382612b4c565b603182019050919050565b7f227d2c207b2274726169745f74797065223a2252696e67656420506c616e657460008201527f73222c202276616c7565223a2022000000000000000000000000000000000000602082015250565b6000612c1a602e8361289c565b9150612c2582612bbe565b602e82019050919050565b7f227d2c207b2274726169745f74797065223a22537461722054797065222c202260008201527f76616c7565223a20220000000000000000000000000000000000000000000000602082015250565b6000612c8c60298361289c565b9150612c9782612c30565b602982019050919050565b7f227d5d2c2022696d616765223a2022646174613a696d6167652f7376672b786d60008201527f6c3b6261736536342c0000000000000000000000000000000000000000000000602082015250565b6000612cfe60298361289c565b9150612d0982612ca2565b602982019050919050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b6000612d4a60028361289c565b9150612d5582612d14565b600282019050919050565b6000612d6b82612add565b9150612d7782896128f3565b9150612d8282612b29565b9150612d8e82886128f3565b9150612d9982612b9b565b9150612da582876128f3565b9150612db082612c0d565b9150612dbc82866128f3565b9150612dc782612c7f565b9150612dd382856128f3565b9150612dde82612cf1565b9150612dea82846128f3565b9150612df582612d3d565b9150819050979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000612e3b601d8361289c565b9150612e4682612e05565b601d82019050919050565b6000612e5c82612e2e565b9150612e6882846128f3565b915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612ecf602683611fb2565b9150612eda82612e73565b604082019050919050565b60006020820190508181036000830152612efe81612ec2565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612f3b602083611fb2565b9150612f4682612f05565b602082019050919050565b60006020820190508181036000830152612f6a81612f2e565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612f9882612f71565b612fa28185612f7c565b9350612fb2818560208601611fc3565b612fbb81611fed565b840191505092915050565b6000608082019050612fdb60008301876120ee565b612fe860208301866120ee565b612ff56040830185612184565b81810360608301526130078184612f8d565b905095945050505050565b60008151905061302181611f18565b92915050565b60006020828403121561303d5761303c611ee2565b5b600061304b84828501613012565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061308e82612059565b915061309983612059565b9250826130a9576130a8613054565b5b828204905092915050565b60006130bf82612059565b91506130ca83612059565b92508282039050818111156130e2576130e1612690565b5b92915050565b600060ff82169050919050565b6000613100826130e8565b915061310b836130e8565b9250828201905060ff81111561312457613123612690565b5b9291505056fe46756c6c79206f6e2d636861696e2c2070726f6365647572616c6c792067656e6572617465642c20616e696d6174656420736f6c61722073797374656d732e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220fb92cbbfce2cb70fff6a07f6b7ef6ca48124aaae5968d7e0979ced3a2318bf5664736f6c63430008100033",
  "libraries": {
    "Utilities": "0x744B8BD1aB1aE8ED8f798eA0cdf9da84625197Ff",
    "Trigonometry": "0x24730cE0481D5E949932456881a72Df23FD5F7b7"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "airdrop(address[],uint256)": {
        "params": {
          "_quantity": "Quantity of solar systems to airdrop to each recipient.",
          "_recipients": "List of recipients to receive the airdrop."
        }
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in `owner`'s account."
      },
      "constructor": {
        "details": "Constructs a new instance of the contract.",
        "params": {
          "_maxSupply": "Maximum supply of solar systems.",
          "_name": "Name of the ERC721 token.",
          "_price": "Price of each solar system in wei.",
          "_symbol": "Symbol of the ERC721 token."
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}."
      },
      "mint(uint256)": {
        "params": {
          "_quantity": "Quantity of solar systems to mint."
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Equivalent to `safeTransferFrom(from, to, tokenId, '')`."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified) to learn more about how these ids are created. This function call must use less than 30000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "ID of the token to get the URI for."
        },
        "returns": {
          "_0": "Token URI."
        }
      },
      "totalSupply()": {
        "details": "Returns the total number of tokens in existence. Burned tokens will reduce the count. To get the total number of tokens minted, please see {_totalMinted}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ApprovalCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "ApprovalQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "BalanceQueryForZeroAddress()": [
        {
          "notice": "Cannot query the balance for the zero address."
        }
      ],
      "MintERC2309QuantityExceedsLimit()": [
        {
          "notice": "The `quantity` minted with ERC2309 exceeds the safety limit."
        }
      ],
      "MintToZeroAddress()": [
        {
          "notice": "Cannot mint to the zero address."
        }
      ],
      "MintZeroQuantity()": [
        {
          "notice": "The quantity of tokens minted must be more than zero."
        }
      ],
      "OwnerQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ],
      "OwnershipNotInitializedForExtraData()": [
        {
          "notice": "The `extraData` cannot be set on an unintialized ownership slot."
        }
      ],
      "TransferCallerNotOwnerNorApproved()": [
        {
          "notice": "The caller must own the token or be an approved operator."
        }
      ],
      "TransferFromIncorrectOwner()": [
        {
          "notice": "The token must be owned by `from`."
        }
      ],
      "TransferToNonERC721ReceiverImplementer()": [
        {
          "notice": "Cannot safely transfer to a contract that does not implement the ERC721Receiver interface."
        }
      ],
      "TransferToZeroAddress()": [
        {
          "notice": "Cannot transfer to the zero address."
        }
      ],
      "URIQueryForNonexistentToken()": [
        {
          "notice": "The token does not exist."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "airdrop(address[],uint256)": {
        "notice": "Airdrops solar systems to a list of recipients. Only callable by the contract owner."
      },
      "mint(uint256)": {
        "notice": "Mints new solar systems for the caller."
      },
      "tokenURI(uint256)": {
        "notice": "Returns the token URI for a given token ID."
      },
      "withdraw()": {
        "notice": "Withdraws the contract's balance. Only callable by the contract owner."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1747,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_currentIndex",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1749,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_burnCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1751,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1753,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1757,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_packedOwnerships",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1761,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_packedAddressData",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1766,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)1679_storage)"
      },
      {
        "astId": 1772,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "_owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 994,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "price",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 996,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "maxSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 999,
        "contract": "contracts/SolarSystem.sol:SolarSystems",
        "label": "renderer",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(Renderer)981"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Renderer)981": {
        "encoding": "inplace",
        "label": "contract Renderer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(TokenApprovalRef)1679_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenApprovalRef)1679_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(TokenApprovalRef)1679_storage": {
        "encoding": "inplace",
        "label": "struct ERC721A.TokenApprovalRef",
        "members": [
          {
            "astId": 1678,
            "contract": "contracts/SolarSystem.sol:SolarSystems",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}