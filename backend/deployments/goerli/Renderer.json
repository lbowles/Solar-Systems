{
  "address": "0xBe9217e8483025ea88608e459110c4773a1dd248",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "planetRadius",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ringsOffset",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orbitRadius",
              "type": "uint256"
            },
            {
              "internalType": "uint256[3]",
              "name": "color",
              "type": "uint256[3]"
            },
            {
              "internalType": "uint256",
              "name": "initialAngleDegrees",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            }
          ],
          "internalType": "struct Renderer.Planet",
          "name": "planet",
          "type": "tuple"
        }
      ],
      "name": "getOrbitSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "render",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf13174e2548005b54376a4fd92194cfb371b358aa360735c7f0d494de222f514",
  "receipt": {
    "to": null,
    "from": "0xCC78016816633528Dd4918746D7F016563Ce27FA",
    "contractAddress": "0xBe9217e8483025ea88608e459110c4773a1dd248",
    "transactionIndex": 81,
    "gasUsed": "2220311",
    "logsBloom": "0x
    "blockHash": "0x92e7d049a974f8c6007c0030acc053916e18e397e5910674b16259c8d539f2e3",
    "transactionHash": "0xf13174e2548005b54376a4fd92194cfb371b358aa360735c7f0d494de222f514",
    "logs": [],
    "blockNumber": 8216308,
    "cumulativeGasUsed": "14407325",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "7a1a69b79dcdafcd626e3419772fe7f5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"planetRadius\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ringsOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orbitRadius\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"color\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256\",\"name\":\"initialAngleDegrees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct Renderer.Planet\",\"name\":\"planet\",\"type\":\"tuple\"}],\"name\":\"getOrbitSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Renderer.sol\":\"Renderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Renderer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"./Trigonometry.sol\\\";\\nimport \\\"./Utilities.sol\\\";\\n\\nlibrary Renderer {\\n  uint256 constant SIZE = 500;\\n\\n  struct Planet {\\n    uint256 planetRadius;\\n    uint256 ringsOffset;\\n    uint256 orbitRadius;\\n    uint256[3] color;\\n    uint256 initialAngleDegrees;\\n    uint256 duration;\\n  }\\n\\n  function translateWithAngle(\\n    int256 x,\\n    int256 y,\\n    uint256 degrees\\n  ) internal pure returns (int256, int256) {\\n    int256 newX = x;\\n    int256 newY = y;\\n\\n    newX =\\n      x *\\n      Trigonometry.cos(degrees * (Trigonometry.PI / 180)) -\\n      y *\\n      Trigonometry.sin(degrees * (Trigonometry.PI / 180));\\n    newY =\\n      x *\\n      Trigonometry.sin(degrees * (Trigonometry.PI / 180)) +\\n      y *\\n      Trigonometry.cos(degrees * (Trigonometry.PI / 180));\\n\\n    return (newX, newY);\\n  }\\n\\n  function getOrbitSVG(Planet memory planet) public pure returns (string memory) {\\n    uint256 halfCanvasWidth = SIZE / 2;\\n\\n    // Calculate the initial position of the planet\\n    int256 x = int256(planet.orbitRadius);\\n    int256 y = 0;\\n\\n    (int256 innerX, int256 innerY) = translateWithAngle(x - 1, y, planet.initialAngleDegrees);\\n    (int256 outerX, int256 outerY) = translateWithAngle(x, y, planet.initialAngleDegrees);\\n\\n    string memory colorTuple = string.concat(\\n      utils.uint2str(planet.color[0]),\\n      \\\",\\\",\\n      utils.uint2str(planet.color[1]),\\n      \\\",\\\",\\n      utils.uint2str(planet.color[2])\\n    );\\n\\n    // Generate the SVG string\\n    string memory renderedSVG = string.concat(\\n      '<circle cx=\\\"',\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" cy=\\\"',\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" r=\\\"',\\n       utils.uint2str(planet.orbitRadius),\\n      '\\\" fill=\\\"none\\\" stroke=\\\"rgba(',\\n      colorTuple,\\n      ',0.5)\\\"/>',\\n      // Inner circle\\n      '<g><circle cx=\\\"',\\n      utils.uint2str(uint256(int256(halfCanvasWidth) + innerX / 1e18)),\\n      '\\\" cy=\\\"'\\n      \\n    );\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      utils.uint2str(uint256(int256(halfCanvasWidth) - innerY / 1e18)),\\n      '\\\" r=\\\"',\\n      utils.uint2str(planet.planetRadius - 2),\\n      '\\\" fill=\\\"rgb(',\\n      colorTuple,\\n      ')\\\"/>'\\n      // Outer circle\\n      '<circle cx=\\\"',\\n      utils.uint2str(uint256(int256(halfCanvasWidth) + outerX / 1e18)),\\n      '\\\" cy=\\\"'\\n    );\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      utils.uint2str(uint256(int256(halfCanvasWidth) - outerY / 1e18)),\\n      '\\\" r=\\\"',\\n      utils.uint2str(planet.planetRadius),\\n      '\\\" fill-opacity=\\\"0.8\\\" fill=\\\"rgb(',\\n      colorTuple,\\n      ')\\\"/>'\\n    );\\n\\n    if (planet.ringsOffset != 0) {\\n      uint256 ringsRadius = planet.planetRadius + planet.ringsOffset;\\n      renderedSVG = string.concat(\\n        renderedSVG,\\n        // Rings\\n        '<circle cx=\\\"',\\n        utils.uint2str(uint256(int256(halfCanvasWidth) + outerX / 1e18)),\\n        '\\\" cy=\\\"',\\n        utils.uint2str(uint256(int256(halfCanvasWidth) - outerY / 1e18)),\\n        '\\\" r=\\\"',\\n        utils.uint2str(ringsRadius),\\n        '\\\" fill=\\\"none\\\" stroke-width=\\\"1\\\" stroke=\\\"rgb(',\\n        colorTuple,\\n        ')\\\"/>'\\n      );\\n    }\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      '<animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 ',\\n      utils.uint2str(halfCanvasWidth),\\n      \\\" \\\",\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" to=\\\"360 ',\\n      utils.uint2str(halfCanvasWidth),\\n      \\\" \\\",\\n      utils.uint2str(halfCanvasWidth),\\n      '\\\" dur=\\\"'\\n    );\\n\\n    renderedSVG = string.concat(\\n      renderedSVG,\\n      utils.uint2str(planet.duration),\\n      's\\\" repeatCount=\\\"indefinite\\\"></animateTransform>',\\n      \\\"</g>\\\"\\n    );\\n\\n    return renderedSVG;\\n  }\\n\\n  function numPlanetsForTokenId(uint256 _tokenId) internal pure returns (uint256) {\\n    return utils.randomRange(_tokenId, \\\"numPlanets\\\", 1, 6);\\n  }\\n\\n  function numRingedPlanetsForTokenId(uint256 _tokenId) internal pure returns (uint256) {\\n    uint256 numRingedPlanets;\\n    for (uint256 i = 0; i < numPlanetsForTokenId(_tokenId); i++) {\\n      if (utils.randomRange(_tokenId, string.concat(\\\"ringsOffset\\\", utils.uint2str(i)), 0, 10) == 5) {\\n        numRingedPlanets++;\\n      }\\n    }\\n    return numRingedPlanets;\\n  }\\n\\n  function hasRareStarForTokenId(uint256 _tokenId) internal pure returns (bool) {\\n    return utils.randomRange(_tokenId, \\\"rareStar\\\", 0, 10) == 5;\\n  }\\n\\n  function getSVG(uint256 _tokenId) public pure returns (string memory) {\\n    uint256 numPlanets = numPlanetsForTokenId(_tokenId);\\n    uint256 radiusInterval = SIZE / 2 / (numPlanets + 3);\\n    uint256 planetRadiusUpperBound = utils.min(radiusInterval / 2, SIZE / 4);\\n    uint256 planetRadiusLowerBound = radiusInterval / 4;\\n\\n    uint256 starRadius = utils.randomRange(_tokenId, \\\"starRadius\\\", radiusInterval, radiusInterval * 2 - 10);\\n    string memory starAttributes = hasRareStarForTokenId(_tokenId) ? 'fill=\\\"#39B1FF\\\"' : 'fill=\\\"#FFDA17\\\"';\\n\\n    string memory renderSvg = string.concat(\\n      '<svg width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" viewBox=\\\"0 0 ',\\n      utils.uint2str(SIZE),\\n      \\\" \\\",\\n      utils.uint2str(SIZE),\\n      '\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n      '<rect width=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" height=\\\"',\\n      utils.uint2str(SIZE),\\n      '\\\" fill=\\\"#0D1F2F\\\"></rect>',\\n      '<circle cx=\\\"',\\n      utils.uint2str(SIZE / 2),\\n      '\\\" cy=\\\"',\\n      utils.uint2str(SIZE / 2),\\n      '\\\" r=\\\"',\\n      utils.uint2str(starRadius),\\n      '\\\" ',\\n      starAttributes,\\n      \\\"/>\\\"\\n    );\\n\\n    for (uint256 i = 0; i < numPlanets; i++) {\\n      Planet memory planet;\\n\\n      if (utils.randomRange(_tokenId, string.concat(\\\"ringsOffset\\\", utils.uint2str(i)), 0, 10) == 5) {\\n        planet.ringsOffset = 4;\\n      }\\n\\n      planet.planetRadius = utils.randomRange(\\n        _tokenId,\\n        string.concat(\\\"planetRadius\\\", utils.uint2str(i)),\\n        planetRadiusLowerBound,\\n        planetRadiusUpperBound - planet.ringsOffset\\n      );\\n\\n      planet.orbitRadius = radiusInterval * (i + 3);\\n      planet.duration = utils.randomRange(_tokenId, string.concat(\\\"duration\\\", utils.uint2str(i)), 5, 15);\\n\\n      planet.color[0] = utils.randomRange(_tokenId, string.concat(\\\"colorR\\\", utils.uint2str(i)), 100, 255);\\n      planet.color[1] = utils.randomRange(_tokenId, string.concat(\\\"colorG\\\", utils.uint2str(i)), 100, 255);\\n      planet.color[2] = utils.randomRange(_tokenId, string.concat(\\\"colorB\\\", utils.uint2str(i)), 100, 255);\\n\\n      planet.initialAngleDegrees = utils.randomRange(\\n        _tokenId,\\n        string.concat(\\\"initialAngle\\\", utils.uint2str(i)),\\n        0,\\n        360\\n      );\\n\\n      string memory planetSVG = getOrbitSVG(planet);\\n      renderSvg = string.concat(renderSvg, planetSVG);\\n    }\\n\\n    renderSvg = string.concat(renderSvg, \\\"</svg>\\\");\\n\\n    return renderSvg;\\n  }\\n\\n  function render(uint256 _tokenId) public pure returns (string memory) {\\n    return getSVG(_tokenId);\\n  }\\n}\\n\",\"keccak256\":\"0x2f9e6c4c50e560c12a16301a5197f30517a8d36e0a9cee97aca0e63f9a240102\",\"license\":\"MIT\"},\"contracts/Trigonometry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/**\\n * @notice Solidity library offering basic trigonometry functions where inputs and outputs are\\n * integers. Inputs are specified in radians scaled by 1e18, and similarly outputs are scaled by 1e18.\\n *\\n * This implementation is based off the Solidity trigonometry library written by Lefteris Karapetsas\\n * which can be found here: https://github.com/Sikorkaio/sikorka/blob/e75c91925c914beaedf4841c0336a806f2b5f66d/contracts/trigonometry.sol\\n *\\n * Compared to Lefteris' implementation, this version makes the following changes:\\n *   - Uses a 32 bits instead of 16 bits for improved accuracy\\n *   - Updated for Solidity 0.8.x\\n *   - Various gas optimizations\\n *   - Change inputs/outputs to standard trig format (scaled by 1e18) instead of requiring the\\n *     integer format used by the algorithm\\n *\\n * Lefertis' implementation is based off Dave Dribin's trigint C library\\n *     http://www.dribin.org/dave/trigint/\\n *\\n * Which in turn is based from a now deleted article which can be found in the Wayback Machine:\\n *     http://web.archive.org/web/20120301144605/http://www.dattalo.com/technical/software/pic/picsine.html\\n */\\nlibrary Trigonometry {\\n  // Table index into the trigonometric table\\n  uint256 constant INDEX_WIDTH = 8;\\n  // Interpolation between successive entries in the table\\n  uint256 constant INTERP_WIDTH = 16;\\n  uint256 constant INDEX_OFFSET = 28 - INDEX_WIDTH;\\n  uint256 constant INTERP_OFFSET = INDEX_OFFSET - INTERP_WIDTH;\\n  uint32 constant ANGLES_IN_CYCLE = 1073741824;\\n  uint32 constant QUADRANT_HIGH_MASK = 536870912;\\n  uint32 constant QUADRANT_LOW_MASK = 268435456;\\n  uint256 constant SINE_TABLE_SIZE = 256;\\n\\n  // Pi as an 18 decimal value, which is plenty of accuracy: \\\"For JPL's highest accuracy calculations, which are for\\n  // interplanetary navigation, we use 3.141592653589793: https://www.jpl.nasa.gov/edu/news/2016/3/16/how-many-decimals-of-pi-do-we-really-need/\\n  uint256 constant PI = 3141592653589793238;\\n  uint256 constant TWO_PI = 2 * PI;\\n  uint256 constant PI_OVER_TWO = PI / 2;\\n\\n  // The constant sine lookup table was generated by generate_trigonometry.py. We must use a constant\\n  // bytes array because constant arrays are not supported in Solidity. Each entry in the lookup\\n  // table is 4 bytes. Since we're using 32-bit parameters for the lookup table, we get a table size\\n  // of 2^(32/4) + 1 = 257, where the first and last entries are equivalent (hence the table size of\\n  // 256 defined above)\\n  uint8 constant entry_bytes = 4; // each entry in the lookup table is 4 bytes\\n  uint256 constant entry_mask = ((1 << (8 * entry_bytes)) - 1); // mask used to cast bytes32 -> lookup table entry\\n  bytes constant sin_table =\\n    hex\\\"00_00_00_00_00_c9_0f_88_01_92_1d_20_02_5b_26_d7_03_24_2a_bf_03_ed_26_e6_04_b6_19_5d_05_7f_00_35_06_47_d9_7c_07_10_a3_45_07_d9_5b_9e_08_a2_00_9a_09_6a_90_49_0a_33_08_bc_0a_fb_68_05_0b_c3_ac_35_0c_8b_d3_5e_0d_53_db_92_0e_1b_c2_e4_0e_e3_87_66_0f_ab_27_2b_10_72_a0_48_11_39_f0_cf_12_01_16_d5_12_c8_10_6e_13_8e_db_b1_14_55_76_b1_15_1b_df_85_15_e2_14_44_16_a8_13_05_17_6d_d9_de_18_33_66_e8_18_f8_b8_3c_19_bd_cb_f3_1a_82_a0_25_1b_47_32_ef_1c_0b_82_6a_1c_cf_8c_b3_1d_93_4f_e5_1e_56_ca_1e_1f_19_f9_7b_1f_dc_dc_1b_20_9f_70_1c_21_61_b3_9f_22_23_a4_c5_22_e5_41_af_23_a6_88_7e_24_67_77_57_25_28_0c_5d_25_e8_45_b6_26_a8_21_85_27_67_9d_f4_28_26_b9_28_28_e5_71_4a_29_a3_c4_85_2a_61_b1_01_2b_1f_34_eb_2b_dc_4e_6f_2c_98_fb_ba_2d_55_3a_fb_2e_11_0a_62_2e_cc_68_1e_2f_87_52_62_30_41_c7_60_30_fb_c5_4d_31_b5_4a_5d_32_6e_54_c7_33_26_e2_c2_33_de_f2_87_34_96_82_4f_35_4d_90_56_36_04_1a_d9_36_ba_20_13_37_6f_9e_46_38_24_93_b0_38_d8_fe_93_39_8c_dd_32_3a_40_2d_d1_3a_f2_ee_b7_3b_a5_1e_29_3c_56_ba_70_3d_07_c1_d5_3d_b8_32_a5_3e_68_0b_2c_3f_17_49_b7_3f_c5_ec_97_40_73_f2_1d_41_21_58_9a_41_ce_1e_64_42_7a_41_d0_43_25_c1_35_43_d0_9a_ec_44_7a_cd_50_45_24_56_bc_45_cd_35_8f_46_75_68_27_47_1c_ec_e6_47_c3_c2_2e_48_69_e6_64_49_0f_57_ee_49_b4_15_33_4a_58_1c_9d_4a_fb_6c_97_4b_9e_03_8f_4c_3f_df_f3_4c_e1_00_34_4d_81_62_c3_4e_21_06_17_4e_bf_e8_a4_4f_5e_08_e2_4f_fb_65_4c_50_97_fc_5e_51_33_cc_94_51_ce_d4_6e_52_69_12_6e_53_02_85_17_53_9b_2a_ef_54_33_02_7d_54_ca_0a_4a_55_60_40_e2_55_f5_a4_d2_56_8a_34_a9_57_1d_ee_f9_57_b0_d2_55_58_42_dd_54_58_d4_0e_8c_59_64_64_97_59_f3_de_12_5a_82_79_99_5b_10_35_ce_5b_9d_11_53_5c_29_0a_cc_5c_b4_20_df_5d_3e_52_36_5d_c7_9d_7b_5e_50_01_5d_5e_d7_7c_89_5f_5e_0d_b2_5f_e3_b3_8d_60_68_6c_ce_60_ec_38_2f_61_6f_14_6b_61_f1_00_3e_62_71_fa_68_62_f2_01_ac_63_71_14_cc_63_ef_32_8f_64_6c_59_bf_64_e8_89_25_65_63_bf_91_65_dd_fb_d2_66_57_3c_bb_66_cf_81_1f_67_46_c7_d7_67_bd_0f_bc_68_32_57_aa_68_a6_9e_80_69_19_e3_1f_69_8c_24_6b_69_fd_61_4a_6a_6d_98_a3_6a_dc_c9_64_6b_4a_f2_78_6b_b8_12_d0_6c_24_29_5f_6c_8f_35_1b_6c_f9_34_fb_6d_62_27_f9_6d_ca_0d_14_6e_30_e3_49_6e_96_a9_9c_6e_fb_5f_11_6f_5f_02_b1_6f_c1_93_84_70_23_10_99_70_83_78_fe_70_e2_cb_c5_71_41_08_04_71_9e_2c_d1_71_fa_39_48_72_55_2c_84_72_af_05_a6_73_07_c3_cf_73_5f_66_25_73_b5_eb_d0_74_0b_53_fa_74_5f_9d_d0_74_b2_c8_83_75_04_d3_44_75_55_bd_4b_75_a5_85_ce_75_f4_2c_0a_76_41_af_3c_76_8e_0e_a5_76_d9_49_88_77_23_5f_2c_77_6c_4e_da_77_b4_17_df_77_fa_b9_88_78_40_33_28_78_84_84_13_78_c7_ab_a1_79_09_a9_2c_79_4a_7c_11_79_8a_23_b0_79_c8_9f_6d_7a_05_ee_ac_7a_42_10_d8_7a_7d_05_5a_7a_b6_cb_a3_7a_ef_63_23_7b_26_cb_4e_7b_5d_03_9d_7b_92_0b_88_7b_c5_e2_8f_7b_f8_88_2f_7c_29_fb_ed_7c_5a_3d_4f_7c_89_4b_dd_7c_b7_27_23_7c_e3_ce_b1_7d_0f_42_17_7d_39_80_eb_7d_62_8a_c5_7d_8a_5f_3f_7d_b0_fd_f7_7d_d6_66_8e_7d_fa_98_a7_7e_1d_93_e9_7e_3f_57_fe_7e_5f_e4_92_7e_7f_39_56_7e_9d_55_fb_7e_ba_3a_38_7e_d5_e5_c5_7e_f0_58_5f_7f_09_91_c3_7f_21_91_b3_7f_38_57_f5_7f_4d_e4_50_7f_62_36_8e_7f_75_4e_7f_7f_87_2b_f2_7f_97_ce_bc_7f_a7_36_b3_7f_b5_63_b2_7f_c2_55_95_7f_ce_0c_3d_7f_d8_87_8d_7f_e1_c7_6a_7f_e9_cb_bf_7f_f0_94_77_7f_f6_21_81_7f_fa_72_d0_7f_fd_88_59_7f_ff_62_15_7f_ff_ff_ff\\\";\\n\\n  /**\\n   * @notice Return the sine of a value, specified in radians scaled by 1e18\\n   * @dev This algorithm for converting sine only uses integer values, and it works by dividing the\\n   * circle into 30 bit angles, i.e. there are 1,073,741,824 (2^30) angle units, instead of the\\n   * standard 360 degrees (2pi radians). From there, we get an output in range -2,147,483,647 to\\n   * 2,147,483,647, (which is the max value of an int32) which is then converted back to the standard\\n   * range of -1 to 1, again scaled by 1e18\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function sin(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      // Convert angle from from arbitrary radian value (range of 0 to 2pi) to the algorithm's range\\n      // of 0 to 1,073,741,824\\n      _angle = (ANGLES_IN_CYCLE * (_angle % TWO_PI)) / TWO_PI;\\n\\n      // Apply a mask on an integer to extract a certain number of bits, where angle is the integer\\n      // whose bits we want to get, the width is the width of the bits (in bits) we want to extract,\\n      // and the offset is the offset of the bits (in bits) we want to extract. The result is an\\n      // integer containing _width bits of _value starting at the offset bit\\n      uint256 interp = (_angle >> INTERP_OFFSET) & ((1 << INTERP_WIDTH) - 1);\\n      uint256 index = (_angle >> INDEX_OFFSET) & ((1 << INDEX_WIDTH) - 1);\\n\\n      // The lookup table only contains data for one quadrant (since sin is symmetric around both\\n      // axes), so here we figure out which quadrant we're in, then we lookup the values in the\\n      // table then modify values accordingly\\n      bool is_odd_quadrant = (_angle & QUADRANT_LOW_MASK) == 0;\\n      bool is_negative_quadrant = (_angle & QUADRANT_HIGH_MASK) != 0;\\n\\n      if (!is_odd_quadrant) {\\n        index = SINE_TABLE_SIZE - 1 - index;\\n      }\\n\\n      bytes memory table = sin_table;\\n      // We are looking for two consecutive indices in our lookup table\\n      // Since EVM is left aligned, to read n bytes of data from idx i, we must read from `i * data_len` + `n`\\n      // therefore, to read two entries of size entry_bytes `index * entry_bytes` + `entry_bytes * 2`\\n      uint256 offset1_2 = (index + 2) * entry_bytes;\\n\\n      // This following snippet will function for any entry_bytes <= 15\\n      uint256 x1_2;\\n      assembly {\\n        // mload will grab one word worth of bytes (32), as that is the minimum size in EVM\\n        x1_2 := mload(add(table, offset1_2))\\n      }\\n\\n      // We now read the last two numbers of size entry_bytes from x1_2\\n      // in example: entry_bytes = 4; x1_2 = 0x00...12345678abcdefgh\\n      // therefore: entry_mask = 0xFFFFFFFF\\n\\n      // 0x00...12345678abcdefgh >> 8*4 = 0x00...12345678\\n      // 0x00...12345678 & 0xFFFFFFFF = 0x12345678\\n      uint256 x1 = (x1_2 >> (8 * entry_bytes)) & entry_mask;\\n      // 0x00...12345678abcdefgh & 0xFFFFFFFF = 0xabcdefgh\\n      uint256 x2 = x1_2 & entry_mask;\\n\\n      // Approximate angle by interpolating in the table, accounting for the quadrant\\n      uint256 approximation = ((x2 - x1) * interp) >> INTERP_WIDTH;\\n      int256 sine = is_odd_quadrant ? int256(x1) + int256(approximation) : int256(x2) - int256(approximation);\\n      if (is_negative_quadrant) {\\n        sine *= -1;\\n      }\\n\\n      // Bring result from the range of -2,147,483,647 through 2,147,483,647 to -1e18 through 1e18.\\n      // This can never overflow because sine is bounded by the above values\\n      return (sine * 1e18) / 2_147_483_647;\\n    }\\n  }\\n\\n  /**\\n   * @notice Return the cosine of a value, specified in radians scaled by 1e18\\n   * @dev This is identical to the sin() method, and just computes the value by delegating to the\\n   * sin() method using the identity cos(x) = sin(x + pi/2)\\n   * @dev Overflow when `angle + PI_OVER_TWO > type(uint256).max` is ok, results are still accurate\\n   * @param _angle Angle to convert\\n   * @return Result scaled by 1e18\\n   */\\n  function cos(uint256 _angle) internal pure returns (int256) {\\n    unchecked {\\n      return sin(_angle + PI_OVER_TWO);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6efee204682c447c9b90e2acf39b6e28286c8e64db156aa1d5d51965eeac248b\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n// Core utils used extensively to format CSS and numbers.\\nlibrary utils {\\n  function random(string memory input) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(input)));\\n  }\\n\\n  function randomRange(\\n    uint256 tokenId,\\n    string memory keyPrefix,\\n    uint256 lower,\\n    uint256 upper\\n  ) internal pure returns (uint256) {\\n    uint256 rand = random(string(abi.encodePacked(keyPrefix, uint2str(tokenId))));\\n    return (rand % (upper - lower)) + lower;\\n  }\\n\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  // converts an unsigned integer to a string\\n  function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\\n    if (_i == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 j = _i;\\n    uint256 len;\\n    while (j != 0) {\\n      len++;\\n      j /= 10;\\n    }\\n    bytes memory bstr = new bytes(len);\\n    uint256 k = len;\\n    while (_i != 0) {\\n      k = k - 1;\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n      bytes1 b1 = bytes1(temp);\\n      bstr[k] = b1;\\n      _i /= 10;\\n    }\\n    return string(bstr);\\n  }\\n}\\n\",\"keccak256\":\"0xe694910e765b3804915b600a0b52452c4dccfeef7ff39b562da2376484d666c1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61276d610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063be985ac914610050578063c321118c14610080578063e3dcf7dd146100b0575b600080fd5b61006a60048036038101906100659190610f52565b6100e0565b604051610077919061100f565b60405180910390f35b61009a60048036038101906100959190610f52565b610596565b6040516100a7919061100f565b60405180910390f35b6100ca60048036038101906100c5919061120d565b6105a8565b6040516100d7919061100f565b60405180910390f35b606060006100ed83610918565b905060006003826100fe919061126a565b60026101f461010d91906112cd565b61011791906112cd565b9050600061013f60028361012b91906112cd565b60046101f461013a91906112cd565b610964565b9050600060048361015091906112cd565b905060006101ad876040518060400160405280600a81526020017f737461725261646975730000000000000000000000000000000000000000000081525086600a60028961019e91906112fe565b6101a89190611358565b61097d565b905060006101ba886109e1565b6101f9576040518060400160405280600e81526020017f66696c6c3d222346464441313722000000000000000000000000000000000000815250610230565b6040518060400160405280600e81526020017f66696c6c3d2223333942314646220000000000000000000000000000000000008152505b9050600061023f6101f4610a30565b61024a6101f4610a30565b6102556101f4610a30565b6102606101f4610a30565b61026b6101f4610a30565b6102766101f4610a30565b61028d60026101f461028891906112cd565b610a30565b6102a460026101f461029f91906112cd565b610a30565b6102ad8b610a30565b8a6040516020016102c79a999897969594939291906115dc565b604051602081830303815290604052905060005b87811015610564576102eb610eaf565b60056103228c6102fa85610a30565b60405160200161030a919061174d565b6040516020818303038152906040526000600a61097d565b036103335760048160200181815250505b6103758b61034084610a30565b6040516020016103509190611799565b6040516020818303038152906040528884602001518b6103709190611358565b61097d565b81600001818152505060038261038b919061126a565b8861039691906112fe565b8160400181815250506103d48b6103ac84610a30565b6040516020016103bc91906117e5565b6040516020818303038152906040526005600f61097d565b8160a00181815250506104128b6103ea84610a30565b6040516020016103fa9190611831565b604051602081830303815290604052606460ff61097d565b816060015160006003811061042a57610429611857565b5b6020020181815250506104688b61044084610a30565b60405160200161045091906118ac565b604051602081830303815290604052606460ff61097d565b81606001516001600381106104805761047f611857565b5b6020020181815250506104be8b61049684610a30565b6040516020016104a691906118f8565b604051602081830303815290604052606460ff61097d565b81606001516002600381106104d6576104d5611857565b5b6020020181815250506105158b6104ec84610a30565b6040516020016104fc9190611944565b604051602081830303815290604052600061016861097d565b8160800181815250506000610529826105a8565b9050838160405160200161053e92919061196a565b60405160208183030381529060405293505050808061055c9061198e565b9150506102db565b508060405160200161057691906119fc565b604051602081830303815290604052905080975050505050505050919050565b60606105a1826100e0565b9050919050565b6060600060026101f46105bb91906112cd565b9050600083604001519050600080806105e56001856105da9190611a2c565b848960800151610bb8565b915091506000806105fb86868b60800151610bb8565b9150915060006106268a6060015160006003811061061c5761061b611857565b5b6020020151610a30565b61064b8b6060015160016003811061064157610640611857565b5b6020020151610a30565b6106708c6060015160026003811061066657610665611857565b5b6020020151610a30565b60405160200161068293929190611a95565b6040516020818303038152906040529050600061069e89610a30565b6106a78a610a30565b6106b48d60400151610a30565b846106dc670de0b6b3a76400008b6106cc9190611ae4565b8e6106d79190611b4e565b610a30565b6040516020016106f0959493929190611c04565b604051602081830303815290604052905080610729670de0b6b3a7640000876107199190611ae4565b8b6107249190611a2c565b610a30565b61074260028e6000015161073d9190611358565b610a30565b8461076a670de0b6b3a76400008961075a9190611ae4565b8e6107659190611b4e565b610a30565b60405160200161077e959493929190611d04565b6040516020818303038152906040529050806107b7670de0b6b3a7640000856107a79190611ae4565b8b6107b29190611a2c565b610a30565b6107c48d60000151610a30565b846040516020016107d89493929190611dd7565b604051602081830303815290604052905060008b602001511461088d5760008b602001518c6000015161080b919061126a565b905081610835670de0b6b3a7640000876108259190611ae4565b8c6108309190611b4e565b610a30565b61085c670de0b6b3a76400008761084c9190611ae4565b8d6108579190611a2c565b610a30565b61086584610a30565b8660405160200161087a959493929190611eb4565b6040516020818303038152906040529150505b806108978a610a30565b6108a08b610a30565b6108a98c610a30565b6108b28d610a30565b6040516020016108c695949392919061202a565b6040516020818303038152906040529050806108e58c60a00151610a30565b6040516020016108f6929190612154565b6040516020818303038152906040529050809950505050505050505050919050565b600061095d826040518060400160405280600a81526020017f6e756d506c616e657473000000000000000000000000000000000000000000008152506001600661097d565b9050919050565b60008183106109735781610975565b825b905092915050565b6000806109b28561098d88610a30565b60405160200161099e92919061196a565b604051602081830303815290604052610cb9565b90508384846109c19190611358565b826109cc9190612192565b6109d6919061126a565b915050949350505050565b60006005610a28836040518060400160405280600881526020017f72617265537461720000000000000000000000000000000000000000000000008152506000600a61097d565b149050919050565b606060008203610a77576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610bb3565b600082905060005b60008214610aa9578080610a929061198e565b915050600a82610aa291906112cd565b9150610a7f565b60008167ffffffffffffffff811115610ac557610ac4611036565b5b6040519080825280601f01601f191660200182016040528015610af75781602001600182028036833780820191505090505b50905060008290505b60008614610bab57600181610b159190611358565b90506000600a8088610b2791906112cd565b610b3191906112fe565b87610b3c9190611358565b6030610b4891906121d0565b905060008160f81b905080848481518110610b6657610b65611857565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88610ba291906112cd565b97505050610b00565b819450505050505b919050565b60008060008590506000859050610bed60b4672b992ddfa23249d6610bdd91906112cd565b86610be891906112fe565b610cec565b86610bf89190612205565b610c2060b4672b992ddfa23249d6610c1091906112cd565b87610c1b91906112fe565b610e82565b88610c2b9190612205565b610c359190611a2c565b9150610c5f60b4672b992ddfa23249d6610c4f91906112cd565b86610c5a91906112fe565b610e82565b86610c6a9190612205565b610c9260b4672b992ddfa23249d6610c8291906112cd565b87610c8d91906112fe565b610cec565b88610c9d9190612205565b610ca79190611b4e565b90508181935093505050935093915050565b600081604051602001610ccc919061231c565b6040516020818303038152906040528051906020012060001c9050919050565b6000672b992ddfa23249d6600202672b992ddfa23249d66002028381610d1557610d1461129e565b5b06634000000063ffffffff160281610d3057610d2f61129e565b5b0491506000600160106001901b0360106008601c030384901c1690506000600160086001901b036008601c0385901c169050600080631000000063ffffffff168616149050600080632000000063ffffffff1687161415905081610d9957826001610100030392505b60006040518061044001604052806104048152602001612334610404913990506000600460ff1660028601029050600081830151905060006001600460080260ff166001901b03600460080260ff1683901c16905060006001600460080260ff166001901b0383169050600060108a84840302901c9050600088610e1f57818303610e23565b8184015b90508715610e51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b637fffffff670de0b6b3a7640000820281610e6f57610e6e61129e565b5b059b505050505050505050505050919050565b6000610ea86002672b992ddfa23249d681610ea057610e9f61129e565b5b048301610cec565b9050919050565b6040518060c00160405280600081526020016000815260200160008152602001610ed7610eeb565b815260200160008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b610f2f81610f1c565b8114610f3a57600080fd5b50565b600081359050610f4c81610f26565b92915050565b600060208284031215610f6857610f67610f17565b5b6000610f7684828501610f3d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fb9578082015181840152602081019050610f9e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fe182610f7f565b610feb8185610f8a565b9350610ffb818560208601610f9b565b61100481610fc5565b840191505092915050565b600060208201905081810360008301526110298184610fd6565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61106e82610fc5565b810181811067ffffffffffffffff8211171561108d5761108c611036565b5b80604052505050565b60006110a0610f0d565b90506110ac8282611065565b919050565b600080fd5b600067ffffffffffffffff8211156110d1576110d0611036565b5b602082029050919050565b600080fd5b60006110f46110ef846110b6565b611096565b9050806020840283018581111561110e5761110d6110dc565b5b835b8181101561113757806111238882610f3d565b845260208401935050602081019050611110565b5050509392505050565b600082601f830112611156576111556110b1565b5b60036111638482856110e1565b91505092915050565b6000610100828403121561118357611182611031565b5b61118d60c0611096565b9050600061119d84828501610f3d565b60008301525060206111b184828501610f3d565b60208301525060406111c584828501610f3d565b60408301525060606111d984828501611141565b60608301525060c06111ed84828501610f3d565b60808301525060e061120184828501610f3d565b60a08301525092915050565b6000610100828403121561122457611223610f17565b5b60006112328482850161116c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061127582610f1c565b915061128083610f1c565b92508282019050808211156112985761129761123b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112d882610f1c565b91506112e383610f1c565b9250826112f3576112f261129e565b5b828204905092915050565b600061130982610f1c565b915061131483610f1c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561134d5761134c61123b565b5b828202905092915050565b600061136382610f1c565b915061136e83610f1c565b92508282039050818111156113865761138561123b565b5b92915050565b7f3c7376672077696474683d220000000000000000000000000000000000000000815250565b600081905092915050565b60006113c882610f7f565b6113d281856113b2565b93506113e2818560208601610f9b565b80840191505092915050565b7f22206865696768743d2200000000000000000000000000000000000000000000815250565b7f222076696577426f783d22302030200000000000000000000000000000000000815250565b7f2000000000000000000000000000000000000000000000000000000000000000815250565b7f2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f60008201527f737667223e000000000000000000000000000000000000000000000000000000602082015250565b60006114bc6025836113b2565b91506114c782611460565b602582019050919050565b7f3c726563742077696474683d2200000000000000000000000000000000000000815250565b7f222066696c6c3d2223304431463246223e3c2f726563743e0000000000000000815250565b7f3c636972636c652063783d220000000000000000000000000000000000000000815250565b7f222063793d220000000000000000000000000000000000000000000000000000815250565b7f2220723d22000000000000000000000000000000000000000000000000000000815250565b7f2220000000000000000000000000000000000000000000000000000000000000815250565b7f2f3e000000000000000000000000000000000000000000000000000000000000815250565b60006115e78261138c565b600c820191506115f7828d6113bd565b9150611602826113ee565b600a82019150611612828c6113bd565b915061161d82611414565b600f8201915061162d828b6113bd565b91506116388261143a565b600182019150611648828a6113bd565b9150611653826114af565b915061165e826114d2565b600d8201915061166e82896113bd565b9150611679826113ee565b600a8201915061168982886113bd565b9150611694826114f8565b6018820191506116a38261151e565b600c820191506116b382876113bd565b91506116be82611544565b6006820191506116ce82866113bd565b91506116d98261156a565b6005820191506116e982856113bd565b91506116f482611590565b60028201915061170482846113bd565b915061170f826115b6565b6002820191508190509b9a5050505050505050505050565b7f72696e67734f6666736574000000000000000000000000000000000000000000815250565b600061175882611727565b600b8201915061176882846113bd565b915081905092915050565b7f706c616e65745261646975730000000000000000000000000000000000000000815250565b60006117a482611773565b600c820191506117b482846113bd565b915081905092915050565b7f6475726174696f6e000000000000000000000000000000000000000000000000815250565b60006117f0826117bf565b60088201915061180082846113bd565b915081905092915050565b7f636f6c6f72520000000000000000000000000000000000000000000000000000815250565b600061183c8261180b565b60068201915061184c82846113bd565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f636f6c6f72470000000000000000000000000000000000000000000000000000815250565b60006118b782611886565b6006820191506118c782846113bd565b915081905092915050565b7f636f6c6f72420000000000000000000000000000000000000000000000000000815250565b6000611903826118d2565b60068201915061191382846113bd565b915081905092915050565b7f696e697469616c416e676c650000000000000000000000000000000000000000815250565b600061194f8261191e565b600c8201915061195f82846113bd565b915081905092915050565b600061197682856113bd565b915061198282846113bd565b91508190509392505050565b600061199982610f1c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119cb576119ca61123b565b5b600182019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b6000611a0882846113bd565b9150611a13826119d6565b60068201915081905092915050565b6000819050919050565b6000611a3782611a22565b9150611a4283611a22565b9250828203905081811260008412168282136000851215161715611a6957611a6861123b565b5b92915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000611aa182866113bd565b9150611aac82611a6f565b600182019150611abc82856113bd565b9150611ac782611a6f565b600182019150611ad782846113bd565b9150819050949350505050565b6000611aef82611a22565b9150611afa83611a22565b925082611b0a57611b0961129e565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611b4357611b4261123b565b5b828205905092915050565b6000611b5982611a22565b9150611b6483611a22565b925082820190508281121560008312168382126000841215161715611b8c57611b8b61123b565b5b92915050565b7f222066696c6c3d226e6f6e6522207374726f6b653d2272676261280000000000815250565b7f2c302e3529222f3e000000000000000000000000000000000000000000000000815250565b7f3c673e3c636972636c652063783d220000000000000000000000000000000000815250565b6000611c0f8261151e565b600c82019150611c1f82886113bd565b9150611c2a82611544565b600682019150611c3a82876113bd565b9150611c458261156a565b600582019150611c5582866113bd565b9150611c6082611b92565b601b82019150611c7082856113bd565b9150611c7b82611bb8565b600882019150611c8a82611bde565b600f82019150611c9a82846113bd565b9150611ca582611544565b6006820191508190509695505050505050565b7f222066696c6c3d22726762280000000000000000000000000000000000000000815250565b7f29222f3e3c636972636c652063783d2200000000000000000000000000000000815250565b6000611d1082886113bd565b9150611d1c82876113bd565b9150611d278261156a565b600582019150611d3782866113bd565b9150611d4282611cb8565b600c82019150611d5282856113bd565b9150611d5d82611cde565b601082019150611d6d82846113bd565b9150611d7882611544565b6006820191508190509695505050505050565b7f222066696c6c2d6f7061636974793d22302e38222066696c6c3d227267622800815250565b7f29222f3e00000000000000000000000000000000000000000000000000000000815250565b6000611de382876113bd565b9150611def82866113bd565b9150611dfa8261156a565b600582019150611e0a82856113bd565b9150611e1582611d8b565b601f82019150611e2582846113bd565b9150611e3082611db1565b60048201915081905095945050505050565b7f222066696c6c3d226e6f6e6522207374726f6b652d77696474683d223122207360008201527f74726f6b653d2272676228000000000000000000000000000000000000000000602082015250565b6000611e9e602b836113b2565b9150611ea982611e42565b602b82019050919050565b6000611ec082886113bd565b9150611ecb8261151e565b600c82019150611edb82876113bd565b9150611ee682611544565b600682019150611ef682866113bd565b9150611f018261156a565b600582019150611f1182856113bd565b9150611f1c82611e91565b9150611f2882846113bd565b9150611f3382611db1565b6004820191508190509695505050505050565b7f3c616e696d6174655472616e73666f726d206174747269627574654e616d653d60008201527f227472616e73666f726d2220747970653d22726f74617465222066726f6d3d2260208201527f3020000000000000000000000000000000000000000000000000000000000000604082015250565b6000611fc86042836113b2565b9150611fd382611f46565b604282019050919050565b7f2220746f3d223336302000000000000000000000000000000000000000000000815250565b7f22206475723d2200000000000000000000000000000000000000000000000000815250565b600061203682886113bd565b915061204182611fbb565b915061204d82876113bd565b91506120588261143a565b60018201915061206882866113bd565b915061207382611fde565b600a8201915061208382856113bd565b915061208e8261143a565b60018201915061209e82846113bd565b91506120a982612004565b6007820191508190509695505050505050565b7f732220726570656174436f756e743d22696e646566696e697465223e3c2f616e60008201527f696d6174655472616e73666f726d3e0000000000000000000000000000000000602082015250565b6000612118602f836113b2565b9150612123826120bc565b602f82019050919050565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815250565b600061216082856113bd565b915061216c82846113bd565b91506121778261210b565b91506121828261212e565b6004820191508190509392505050565b600061219d82610f1c565b91506121a883610f1c565b9250826121b8576121b761129e565b5b828206905092915050565b600060ff82169050919050565b60006121db826121c3565b91506121e6836121c3565b9250828201905060ff8111156121ff576121fe61123b565b5b92915050565b600061221082611a22565b915061221b83611a22565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561225a5761225961123b565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156122975761229661123b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156122d4576122d361123b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123115761231061123b565b5b828202905092915050565b600061232882846113bd565b91508190509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffffa264697066735822122002c9146f5dab60eeb3b9f80bb6acee352019a09c8ad7d5aedaed60332bd36a0264736f6c63430008100033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c8063be985ac914610050578063c321118c14610080578063e3dcf7dd146100b0575b600080fd5b61006a60048036038101906100659190610f52565b6100e0565b604051610077919061100f565b60405180910390f35b61009a60048036038101906100959190610f52565b610596565b6040516100a7919061100f565b60405180910390f35b6100ca60048036038101906100c5919061120d565b6105a8565b6040516100d7919061100f565b60405180910390f35b606060006100ed83610918565b905060006003826100fe919061126a565b60026101f461010d91906112cd565b61011791906112cd565b9050600061013f60028361012b91906112cd565b60046101f461013a91906112cd565b610964565b9050600060048361015091906112cd565b905060006101ad876040518060400160405280600a81526020017f737461725261646975730000000000000000000000000000000000000000000081525086600a60028961019e91906112fe565b6101a89190611358565b61097d565b905060006101ba886109e1565b6101f9576040518060400160405280600e81526020017f66696c6c3d222346464441313722000000000000000000000000000000000000815250610230565b6040518060400160405280600e81526020017f66696c6c3d2223333942314646220000000000000000000000000000000000008152505b9050600061023f6101f4610a30565b61024a6101f4610a30565b6102556101f4610a30565b6102606101f4610a30565b61026b6101f4610a30565b6102766101f4610a30565b61028d60026101f461028891906112cd565b610a30565b6102a460026101f461029f91906112cd565b610a30565b6102ad8b610a30565b8a6040516020016102c79a999897969594939291906115dc565b604051602081830303815290604052905060005b87811015610564576102eb610eaf565b60056103228c6102fa85610a30565b60405160200161030a919061174d565b6040516020818303038152906040526000600a61097d565b036103335760048160200181815250505b6103758b61034084610a30565b6040516020016103509190611799565b6040516020818303038152906040528884602001518b6103709190611358565b61097d565b81600001818152505060038261038b919061126a565b8861039691906112fe565b8160400181815250506103d48b6103ac84610a30565b6040516020016103bc91906117e5565b6040516020818303038152906040526005600f61097d565b8160a00181815250506104128b6103ea84610a30565b6040516020016103fa9190611831565b604051602081830303815290604052606460ff61097d565b816060015160006003811061042a57610429611857565b5b6020020181815250506104688b61044084610a30565b60405160200161045091906118ac565b604051602081830303815290604052606460ff61097d565b81606001516001600381106104805761047f611857565b5b6020020181815250506104be8b61049684610a30565b6040516020016104a691906118f8565b604051602081830303815290604052606460ff61097d565b81606001516002600381106104d6576104d5611857565b5b6020020181815250506105158b6104ec84610a30565b6040516020016104fc9190611944565b604051602081830303815290604052600061016861097d565b8160800181815250506000610529826105a8565b9050838160405160200161053e92919061196a565b60405160208183030381529060405293505050808061055c9061198e565b9150506102db565b508060405160200161057691906119fc565b604051602081830303815290604052905080975050505050505050919050565b60606105a1826100e0565b9050919050565b6060600060026101f46105bb91906112cd565b9050600083604001519050600080806105e56001856105da9190611a2c565b848960800151610bb8565b915091506000806105fb86868b60800151610bb8565b9150915060006106268a6060015160006003811061061c5761061b611857565b5b6020020151610a30565b61064b8b6060015160016003811061064157610640611857565b5b6020020151610a30565b6106708c6060015160026003811061066657610665611857565b5b6020020151610a30565b60405160200161068293929190611a95565b6040516020818303038152906040529050600061069e89610a30565b6106a78a610a30565b6106b48d60400151610a30565b846106dc670de0b6b3a76400008b6106cc9190611ae4565b8e6106d79190611b4e565b610a30565b6040516020016106f0959493929190611c04565b604051602081830303815290604052905080610729670de0b6b3a7640000876107199190611ae4565b8b6107249190611a2c565b610a30565b61074260028e6000015161073d9190611358565b610a30565b8461076a670de0b6b3a76400008961075a9190611ae4565b8e6107659190611b4e565b610a30565b60405160200161077e959493929190611d04565b6040516020818303038152906040529050806107b7670de0b6b3a7640000856107a79190611ae4565b8b6107b29190611a2c565b610a30565b6107c48d60000151610a30565b846040516020016107d89493929190611dd7565b604051602081830303815290604052905060008b602001511461088d5760008b602001518c6000015161080b919061126a565b905081610835670de0b6b3a7640000876108259190611ae4565b8c6108309190611b4e565b610a30565b61085c670de0b6b3a76400008761084c9190611ae4565b8d6108579190611a2c565b610a30565b61086584610a30565b8660405160200161087a959493929190611eb4565b6040516020818303038152906040529150505b806108978a610a30565b6108a08b610a30565b6108a98c610a30565b6108b28d610a30565b6040516020016108c695949392919061202a565b6040516020818303038152906040529050806108e58c60a00151610a30565b6040516020016108f6929190612154565b6040516020818303038152906040529050809950505050505050505050919050565b600061095d826040518060400160405280600a81526020017f6e756d506c616e657473000000000000000000000000000000000000000000008152506001600661097d565b9050919050565b60008183106109735781610975565b825b905092915050565b6000806109b28561098d88610a30565b60405160200161099e92919061196a565b604051602081830303815290604052610cb9565b90508384846109c19190611358565b826109cc9190612192565b6109d6919061126a565b915050949350505050565b60006005610a28836040518060400160405280600881526020017f72617265537461720000000000000000000000000000000000000000000000008152506000600a61097d565b149050919050565b606060008203610a77576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610bb3565b600082905060005b60008214610aa9578080610a929061198e565b915050600a82610aa291906112cd565b9150610a7f565b60008167ffffffffffffffff811115610ac557610ac4611036565b5b6040519080825280601f01601f191660200182016040528015610af75781602001600182028036833780820191505090505b50905060008290505b60008614610bab57600181610b159190611358565b90506000600a8088610b2791906112cd565b610b3191906112fe565b87610b3c9190611358565b6030610b4891906121d0565b905060008160f81b905080848481518110610b6657610b65611857565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88610ba291906112cd565b97505050610b00565b819450505050505b919050565b60008060008590506000859050610bed60b4672b992ddfa23249d6610bdd91906112cd565b86610be891906112fe565b610cec565b86610bf89190612205565b610c2060b4672b992ddfa23249d6610c1091906112cd565b87610c1b91906112fe565b610e82565b88610c2b9190612205565b610c359190611a2c565b9150610c5f60b4672b992ddfa23249d6610c4f91906112cd565b86610c5a91906112fe565b610e82565b86610c6a9190612205565b610c9260b4672b992ddfa23249d6610c8291906112cd565b87610c8d91906112fe565b610cec565b88610c9d9190612205565b610ca79190611b4e565b90508181935093505050935093915050565b600081604051602001610ccc919061231c565b6040516020818303038152906040528051906020012060001c9050919050565b6000672b992ddfa23249d6600202672b992ddfa23249d66002028381610d1557610d1461129e565b5b06634000000063ffffffff160281610d3057610d2f61129e565b5b0491506000600160106001901b0360106008601c030384901c1690506000600160086001901b036008601c0385901c169050600080631000000063ffffffff168616149050600080632000000063ffffffff1687161415905081610d9957826001610100030392505b60006040518061044001604052806104048152602001612334610404913990506000600460ff1660028601029050600081830151905060006001600460080260ff166001901b03600460080260ff1683901c16905060006001600460080260ff166001901b0383169050600060108a84840302901c9050600088610e1f57818303610e23565b8184015b90508715610e51577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b637fffffff670de0b6b3a7640000820281610e6f57610e6e61129e565b5b059b505050505050505050505050919050565b6000610ea86002672b992ddfa23249d681610ea057610e9f61129e565b5b048301610cec565b9050919050565b6040518060c00160405280600081526020016000815260200160008152602001610ed7610eeb565b815260200160008152602001600081525090565b6040518060600160405280600390602082028036833780820191505090505090565b6000604051905090565b600080fd5b6000819050919050565b610f2f81610f1c565b8114610f3a57600080fd5b50565b600081359050610f4c81610f26565b92915050565b600060208284031215610f6857610f67610f17565b5b6000610f7684828501610f3d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610fb9578082015181840152602081019050610f9e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610fe182610f7f565b610feb8185610f8a565b9350610ffb818560208601610f9b565b61100481610fc5565b840191505092915050565b600060208201905081810360008301526110298184610fd6565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61106e82610fc5565b810181811067ffffffffffffffff8211171561108d5761108c611036565b5b80604052505050565b60006110a0610f0d565b90506110ac8282611065565b919050565b600080fd5b600067ffffffffffffffff8211156110d1576110d0611036565b5b602082029050919050565b600080fd5b60006110f46110ef846110b6565b611096565b9050806020840283018581111561110e5761110d6110dc565b5b835b8181101561113757806111238882610f3d565b845260208401935050602081019050611110565b5050509392505050565b600082601f830112611156576111556110b1565b5b60036111638482856110e1565b91505092915050565b6000610100828403121561118357611182611031565b5b61118d60c0611096565b9050600061119d84828501610f3d565b60008301525060206111b184828501610f3d565b60208301525060406111c584828501610f3d565b60408301525060606111d984828501611141565b60608301525060c06111ed84828501610f3d565b60808301525060e061120184828501610f3d565b60a08301525092915050565b6000610100828403121561122457611223610f17565b5b60006112328482850161116c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061127582610f1c565b915061128083610f1c565b92508282019050808211156112985761129761123b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112d882610f1c565b91506112e383610f1c565b9250826112f3576112f261129e565b5b828204905092915050565b600061130982610f1c565b915061131483610f1c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561134d5761134c61123b565b5b828202905092915050565b600061136382610f1c565b915061136e83610f1c565b92508282039050818111156113865761138561123b565b5b92915050565b7f3c7376672077696474683d220000000000000000000000000000000000000000815250565b600081905092915050565b60006113c882610f7f565b6113d281856113b2565b93506113e2818560208601610f9b565b80840191505092915050565b7f22206865696768743d2200000000000000000000000000000000000000000000815250565b7f222076696577426f783d22302030200000000000000000000000000000000000815250565b7f2000000000000000000000000000000000000000000000000000000000000000815250565b7f2220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f60008201527f737667223e000000000000000000000000000000000000000000000000000000602082015250565b60006114bc6025836113b2565b91506114c782611460565b602582019050919050565b7f3c726563742077696474683d2200000000000000000000000000000000000000815250565b7f222066696c6c3d2223304431463246223e3c2f726563743e0000000000000000815250565b7f3c636972636c652063783d220000000000000000000000000000000000000000815250565b7f222063793d220000000000000000000000000000000000000000000000000000815250565b7f2220723d22000000000000000000000000000000000000000000000000000000815250565b7f2220000000000000000000000000000000000000000000000000000000000000815250565b7f2f3e000000000000000000000000000000000000000000000000000000000000815250565b60006115e78261138c565b600c820191506115f7828d6113bd565b9150611602826113ee565b600a82019150611612828c6113bd565b915061161d82611414565b600f8201915061162d828b6113bd565b91506116388261143a565b600182019150611648828a6113bd565b9150611653826114af565b915061165e826114d2565b600d8201915061166e82896113bd565b9150611679826113ee565b600a8201915061168982886113bd565b9150611694826114f8565b6018820191506116a38261151e565b600c820191506116b382876113bd565b91506116be82611544565b6006820191506116ce82866113bd565b91506116d98261156a565b6005820191506116e982856113bd565b91506116f482611590565b60028201915061170482846113bd565b915061170f826115b6565b6002820191508190509b9a5050505050505050505050565b7f72696e67734f6666736574000000000000000000000000000000000000000000815250565b600061175882611727565b600b8201915061176882846113bd565b915081905092915050565b7f706c616e65745261646975730000000000000000000000000000000000000000815250565b60006117a482611773565b600c820191506117b482846113bd565b915081905092915050565b7f6475726174696f6e000000000000000000000000000000000000000000000000815250565b60006117f0826117bf565b60088201915061180082846113bd565b915081905092915050565b7f636f6c6f72520000000000000000000000000000000000000000000000000000815250565b600061183c8261180b565b60068201915061184c82846113bd565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f636f6c6f72470000000000000000000000000000000000000000000000000000815250565b60006118b782611886565b6006820191506118c782846113bd565b915081905092915050565b7f636f6c6f72420000000000000000000000000000000000000000000000000000815250565b6000611903826118d2565b60068201915061191382846113bd565b915081905092915050565b7f696e697469616c416e676c650000000000000000000000000000000000000000815250565b600061194f8261191e565b600c8201915061195f82846113bd565b915081905092915050565b600061197682856113bd565b915061198282846113bd565b91508190509392505050565b600061199982610f1c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036119cb576119ca61123b565b5b600182019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000815250565b6000611a0882846113bd565b9150611a13826119d6565b60068201915081905092915050565b6000819050919050565b6000611a3782611a22565b9150611a4283611a22565b9250828203905081811260008412168282136000851215161715611a6957611a6861123b565b5b92915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000611aa182866113bd565b9150611aac82611a6f565b600182019150611abc82856113bd565b9150611ac782611a6f565b600182019150611ad782846113bd565b9150819050949350505050565b6000611aef82611a22565b9150611afa83611a22565b925082611b0a57611b0961129e565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615611b4357611b4261123b565b5b828205905092915050565b6000611b5982611a22565b9150611b6483611a22565b925082820190508281121560008312168382126000841215161715611b8c57611b8b61123b565b5b92915050565b7f222066696c6c3d226e6f6e6522207374726f6b653d2272676261280000000000815250565b7f2c302e3529222f3e000000000000000000000000000000000000000000000000815250565b7f3c673e3c636972636c652063783d220000000000000000000000000000000000815250565b6000611c0f8261151e565b600c82019150611c1f82886113bd565b9150611c2a82611544565b600682019150611c3a82876113bd565b9150611c458261156a565b600582019150611c5582866113bd565b9150611c6082611b92565b601b82019150611c7082856113bd565b9150611c7b82611bb8565b600882019150611c8a82611bde565b600f82019150611c9a82846113bd565b9150611ca582611544565b6006820191508190509695505050505050565b7f222066696c6c3d22726762280000000000000000000000000000000000000000815250565b7f29222f3e3c636972636c652063783d2200000000000000000000000000000000815250565b6000611d1082886113bd565b9150611d1c82876113bd565b9150611d278261156a565b600582019150611d3782866113bd565b9150611d4282611cb8565b600c82019150611d5282856113bd565b9150611d5d82611cde565b601082019150611d6d82846113bd565b9150611d7882611544565b6006820191508190509695505050505050565b7f222066696c6c2d6f7061636974793d22302e38222066696c6c3d227267622800815250565b7f29222f3e00000000000000000000000000000000000000000000000000000000815250565b6000611de382876113bd565b9150611def82866113bd565b9150611dfa8261156a565b600582019150611e0a82856113bd565b9150611e1582611d8b565b601f82019150611e2582846113bd565b9150611e3082611db1565b60048201915081905095945050505050565b7f222066696c6c3d226e6f6e6522207374726f6b652d77696474683d223122207360008201527f74726f6b653d2272676228000000000000000000000000000000000000000000602082015250565b6000611e9e602b836113b2565b9150611ea982611e42565b602b82019050919050565b6000611ec082886113bd565b9150611ecb8261151e565b600c82019150611edb82876113bd565b9150611ee682611544565b600682019150611ef682866113bd565b9150611f018261156a565b600582019150611f1182856113bd565b9150611f1c82611e91565b9150611f2882846113bd565b9150611f3382611db1565b6004820191508190509695505050505050565b7f3c616e696d6174655472616e73666f726d206174747269627574654e616d653d60008201527f227472616e73666f726d2220747970653d22726f74617465222066726f6d3d2260208201527f3020000000000000000000000000000000000000000000000000000000000000604082015250565b6000611fc86042836113b2565b9150611fd382611f46565b604282019050919050565b7f2220746f3d223336302000000000000000000000000000000000000000000000815250565b7f22206475723d2200000000000000000000000000000000000000000000000000815250565b600061203682886113bd565b915061204182611fbb565b915061204d82876113bd565b91506120588261143a565b60018201915061206882866113bd565b915061207382611fde565b600a8201915061208382856113bd565b915061208e8261143a565b60018201915061209e82846113bd565b91506120a982612004565b6007820191508190509695505050505050565b7f732220726570656174436f756e743d22696e646566696e697465223e3c2f616e60008201527f696d6174655472616e73666f726d3e0000000000000000000000000000000000602082015250565b6000612118602f836113b2565b9150612123826120bc565b602f82019050919050565b7f3c2f673e00000000000000000000000000000000000000000000000000000000815250565b600061216082856113bd565b915061216c82846113bd565b91506121778261210b565b91506121828261212e565b6004820191508190509392505050565b600061219d82610f1c565b91506121a883610f1c565b9250826121b8576121b761129e565b5b828206905092915050565b600060ff82169050919050565b60006121db826121c3565b91506121e6836121c3565b9250828201905060ff8111156121ff576121fe61123b565b5b92915050565b600061221082611a22565b915061221b83611a22565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561225a5761225961123b565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156122975761229661123b565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156122d4576122d361123b565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123115761231061123b565b5b828202905092915050565b600061232882846113bd565b91508190509291505056fe0000000000c90f8801921d20025b26d703242abf03ed26e604b6195d057f00350647d97c0710a34507d95b9e08a2009a096a90490a3308bc0afb68050bc3ac350c8bd35e0d53db920e1bc2e40ee387660fab272b1072a0481139f0cf120116d512c8106e138edbb1145576b1151bdf8515e2144416a81305176dd9de183366e818f8b83c19bdcbf31a82a0251b4732ef1c0b826a1ccf8cb31d934fe51e56ca1e1f19f97b1fdcdc1b209f701c2161b39f2223a4c522e541af23a6887e2467775725280c5d25e845b626a8218527679df42826b92828e5714a29a3c4852a61b1012b1f34eb2bdc4e6f2c98fbba2d553afb2e110a622ecc681e2f8752623041c76030fbc54d31b54a5d326e54c73326e2c233def2873496824f354d905636041ad936ba2013376f9e46382493b038d8fe93398cdd323a402dd13af2eeb73ba51e293c56ba703d07c1d53db832a53e680b2c3f1749b73fc5ec974073f21d4121589a41ce1e64427a41d04325c13543d09aec447acd50452456bc45cd358f46756827471cece647c3c22e4869e664490f57ee49b415334a581c9d4afb6c974b9e038f4c3fdff34ce100344d8162c34e2106174ebfe8a44f5e08e24ffb654c5097fc5e5133cc9451ced46e5269126e53028517539b2aef5433027d54ca0a4a556040e255f5a4d2568a34a9571deef957b0d2555842dd5458d40e8c5964649759f3de125a8279995b1035ce5b9d11535c290acc5cb420df5d3e52365dc79d7b5e50015d5ed77c895f5e0db25fe3b38d60686cce60ec382f616f146b61f1003e6271fa6862f201ac637114cc63ef328f646c59bf64e889256563bf9165ddfbd266573cbb66cf811f6746c7d767bd0fbc683257aa68a69e806919e31f698c246b69fd614a6a6d98a36adcc9646b4af2786bb812d06c24295f6c8f351b6cf934fb6d6227f96dca0d146e30e3496e96a99c6efb5f116f5f02b16fc1938470231099708378fe70e2cbc571410804719e2cd171fa394872552c8472af05a67307c3cf735f662573b5ebd0740b53fa745f9dd074b2c8837504d3447555bd4b75a585ce75f42c0a7641af3c768e0ea576d9498877235f2c776c4eda77b417df77fab988784033287884841378c7aba17909a92c794a7c11798a23b079c89f6d7a05eeac7a4210d87a7d055a7ab6cba37aef63237b26cb4e7b5d039d7b920b887bc5e28f7bf8882f7c29fbed7c5a3d4f7c894bdd7cb727237ce3ceb17d0f42177d3980eb7d628ac57d8a5f3f7db0fdf77dd6668e7dfa98a77e1d93e97e3f57fe7e5fe4927e7f39567e9d55fb7eba3a387ed5e5c57ef0585f7f0991c37f2191b37f3857f57f4de4507f62368e7f754e7f7f872bf27f97cebc7fa736b37fb563b27fc255957fce0c3d7fd8878d7fe1c76a7fe9cbbf7ff094777ff621817ffa72d07ffd88597fff62157fffffffa264697066735822122002c9146f5dab60eeb3b9f80bb6acee352019a09c8ad7d5aedaed60332bd36a0264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}